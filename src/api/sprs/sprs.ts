/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type { HTTPValidationError } from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ–≤—ñ–¥–Ω–∏–∫–∞
 * @summary Get Dict
 */
export const getDictApiSprsDictionaryGet = (
  dictionary: MaybeRef<string>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  dictionary = unref(dictionary);

  return axios.default.get(`/api/sprs/${dictionary}`, options);
};

export const getGetDictApiSprsDictionaryGetQueryKey = (
  dictionary: MaybeRef<string>
) => {
  return ["api", "sprs", dictionary] as const;
};

export const getGetDictApiSprsDictionaryGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getDictApiSprsDictionaryGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  dictionary: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDictApiSprsDictionaryGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetDictApiSprsDictionaryGetQueryKey(dictionary);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDictApiSprsDictionaryGet>>
  > = ({ signal }) =>
    getDictApiSprsDictionaryGet(dictionary, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(dictionary)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDictApiSprsDictionaryGet>>,
    TError,
    TData
  >;
};

export type GetDictApiSprsDictionaryGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDictApiSprsDictionaryGet>>
>;
export type GetDictApiSprsDictionaryGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Dict
 */

export function useGetDictApiSprsDictionaryGet<
  TData = Awaited<ReturnType<typeof getDictApiSprsDictionaryGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  dictionary: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDictApiSprsDictionaryGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDictApiSprsDictionaryGetQueryOptions(
    dictionary,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
