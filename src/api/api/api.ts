/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  HTTPValidationError,
  PaymentByMonthsApiPaymentsYearMonthsGetParams,
  PaymentsByYearsApiPaymentsYearsGetParams,
  PaymentsForPeriodApiPaymentsPeriodGetParams,
} from ".././model";

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–ª–∞—Ç–µ–∂—ñ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –∑–∞ –ø–µ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ (—Ä—ñ–∫, –º—ñ—Å—è—Ü—å –∞–±–æ custom –ø–µ—Ä—ñ–æ–¥)
 * @summary Payments For Period
 */
export const paymentsForPeriodApiPaymentsPeriodGet = (
  params?: MaybeRef<PaymentsForPeriodApiPaymentsPeriodGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  params = unref(params);

  return axios.get(`/api/payments/period`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getPaymentsForPeriodApiPaymentsPeriodGetQueryKey = (
  params?: MaybeRef<PaymentsForPeriodApiPaymentsPeriodGetParams>
) => {
  return ["api", "payments", "period", ...(params ? [params] : [])] as const;
};

export const getPaymentsForPeriodApiPaymentsPeriodGetQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentsForPeriodApiPaymentsPeriodGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<PaymentsForPeriodApiPaymentsPeriodGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsForPeriodApiPaymentsPeriodGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getPaymentsForPeriodApiPaymentsPeriodGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentsForPeriodApiPaymentsPeriodGet>>
  > = ({ signal }) =>
    paymentsForPeriodApiPaymentsPeriodGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentsForPeriodApiPaymentsPeriodGet>>,
    TError,
    TData
  >;
};

export type PaymentsForPeriodApiPaymentsPeriodGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentsForPeriodApiPaymentsPeriodGet>>
>;
export type PaymentsForPeriodApiPaymentsPeriodGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Payments For Period
 */

export function usePaymentsForPeriodApiPaymentsPeriodGet<
  TData = Awaited<ReturnType<typeof paymentsForPeriodApiPaymentsPeriodGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<PaymentsForPeriodApiPaymentsPeriodGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsForPeriodApiPaymentsPeriodGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPaymentsForPeriodApiPaymentsPeriodGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–ª–∞—Ç–µ–∂—ñ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –∑–∞ —Ä–æ–∫–∞–º–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤–∞–ª—é—Ç
 * @summary Payments By Years
 */
export const paymentsByYearsApiPaymentsYearsGet = (
  params?: MaybeRef<PaymentsByYearsApiPaymentsYearsGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  params = unref(params);

  return axios.get(`/api/payments/years`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getPaymentsByYearsApiPaymentsYearsGetQueryKey = (
  params?: MaybeRef<PaymentsByYearsApiPaymentsYearsGetParams>
) => {
  return ["api", "payments", "years", ...(params ? [params] : [])] as const;
};

export const getPaymentsByYearsApiPaymentsYearsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentsByYearsApiPaymentsYearsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<PaymentsByYearsApiPaymentsYearsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsByYearsApiPaymentsYearsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getPaymentsByYearsApiPaymentsYearsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentsByYearsApiPaymentsYearsGet>>
  > = ({ signal }) =>
    paymentsByYearsApiPaymentsYearsGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentsByYearsApiPaymentsYearsGet>>,
    TError,
    TData
  >;
};

export type PaymentsByYearsApiPaymentsYearsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentsByYearsApiPaymentsYearsGet>>
>;
export type PaymentsByYearsApiPaymentsYearsGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Payments By Years
 */

export function usePaymentsByYearsApiPaymentsYearsGet<
  TData = Awaited<ReturnType<typeof paymentsByYearsApiPaymentsYearsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<PaymentsByYearsApiPaymentsYearsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentsByYearsApiPaymentsYearsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPaymentsByYearsApiPaymentsYearsGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–ª–∞—Ç–µ–∂—ñ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –∑–∞ –º—ñ—Å—è—Ü—è–º–∏ –≤ —Ä–æ—Ü—ñ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤–∞–ª—é—Ç
 * @summary Payment By Months
 */
export const paymentByMonthsApiPaymentsYearMonthsGet = (
  year: MaybeRef<number>,
  params?: MaybeRef<PaymentByMonthsApiPaymentsYearMonthsGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  year = unref(year);
  params = unref(params);

  return axios.get(`/api/payments/${year}/months`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getPaymentByMonthsApiPaymentsYearMonthsGetQueryKey = (
  year: MaybeRef<number>,
  params?: MaybeRef<PaymentByMonthsApiPaymentsYearMonthsGetParams>
) => {
  return [
    "api",
    "payments",
    year,
    "months",
    ...(params ? [params] : []),
  ] as const;
};

export const getPaymentByMonthsApiPaymentsYearMonthsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof paymentByMonthsApiPaymentsYearMonthsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  year: MaybeRef<number>,
  params?: MaybeRef<PaymentByMonthsApiPaymentsYearMonthsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentByMonthsApiPaymentsYearMonthsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getPaymentByMonthsApiPaymentsYearMonthsGetQueryKey(
    year,
    params
  );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof paymentByMonthsApiPaymentsYearMonthsGet>>
  > = ({ signal }) =>
    paymentByMonthsApiPaymentsYearMonthsGet(year, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(year)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof paymentByMonthsApiPaymentsYearMonthsGet>>,
    TError,
    TData
  >;
};

export type PaymentByMonthsApiPaymentsYearMonthsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof paymentByMonthsApiPaymentsYearMonthsGet>>
>;
export type PaymentByMonthsApiPaymentsYearMonthsGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Payment By Months
 */

export function usePaymentByMonthsApiPaymentsYearMonthsGet<
  TData = Awaited<ReturnType<typeof paymentByMonthsApiPaymentsYearMonthsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  year: MaybeRef<number>,
  params?: MaybeRef<PaymentByMonthsApiPaymentsYearMonthsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof paymentByMonthsApiPaymentsYearMonthsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPaymentByMonthsApiPaymentsYearMonthsGetQueryOptions(
    year,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É /txt/about.html
 * @summary About
 */
export const aboutApiAboutGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/about`, options);
};

export const getAboutApiAboutGetQueryKey = () => {
  return ["api", "about"] as const;
};

export const getAboutApiAboutGetQueryOptions = <
  TData = Awaited<ReturnType<typeof aboutApiAboutGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof aboutApiAboutGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getAboutApiAboutGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof aboutApiAboutGet>>
  > = ({ signal }) => aboutApiAboutGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof aboutApiAboutGet>>,
    TError,
    TData
  >;
};

export type AboutApiAboutGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof aboutApiAboutGet>>
>;
export type AboutApiAboutGetQueryError = AxiosError<unknown>;

/**
 * @summary About
 */

export function useAboutApiAboutGet<
  TData = Awaited<ReturnType<typeof aboutApiAboutGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof aboutApiAboutGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAboutApiAboutGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
