/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  HTTPValidationError,
  MonoUserCreate,
  MonoUserUpdate,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ Mono
 * @summary Get Mono Users
 */
export const getMonoUsersApiMonoUsersGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.default.get(`/api/mono/users`, options);
};

export const getGetMonoUsersApiMonoUsersGetQueryKey = () => {
  return ["api", "mono", "users"] as const;
};

export const getGetMonoUsersApiMonoUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMonoUsersApiMonoUsersGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMonoUsersApiMonoUsersGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetMonoUsersApiMonoUsersGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMonoUsersApiMonoUsersGet>>
  > = ({ signal }) => getMonoUsersApiMonoUsersGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMonoUsersApiMonoUsersGet>>,
    TError,
    TData
  >;
};

export type GetMonoUsersApiMonoUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMonoUsersApiMonoUsersGet>>
>;
export type GetMonoUsersApiMonoUsersGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Mono Users
 */

export function useGetMonoUsersApiMonoUsersGet<
  TData = Awaited<ReturnType<typeof getMonoUsersApiMonoUsersGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMonoUsersApiMonoUsersGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMonoUsersApiMonoUsersGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Mono
 * @summary Add Mono User
 */
export const addMonoUserApiMonoUsersPost = (
  monoUserCreate: MaybeRef<MonoUserCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoUserCreate = unref(monoUserCreate);

  return axios.default.post(`/api/mono/users`, monoUserCreate, options);
};

export const getAddMonoUserApiMonoUsersPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addMonoUserApiMonoUsersPost>>,
    TError,
    { data: MonoUserCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addMonoUserApiMonoUsersPost>>,
  TError,
  { data: MonoUserCreate },
  TContext
> => {
  const mutationKey = ["addMonoUserApiMonoUsersPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addMonoUserApiMonoUsersPost>>,
    { data: MonoUserCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addMonoUserApiMonoUsersPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddMonoUserApiMonoUsersPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addMonoUserApiMonoUsersPost>>
>;
export type AddMonoUserApiMonoUsersPostMutationBody = MonoUserCreate;
export type AddMonoUserApiMonoUsersPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Add Mono User
 */
export const useAddMonoUserApiMonoUsersPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addMonoUserApiMonoUsersPost>>,
    TError,
    { data: MonoUserCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof addMonoUserApiMonoUsersPost>>,
  TError,
  { data: MonoUserCreate },
  TContext
> => {
  const mutationOptions =
    getAddMonoUserApiMonoUsersPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Mono
 * @summary Delete Mono User
 */
export const deleteMonoUserApiMonoUsersMonoUserIdDelete = (
  monoUserId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoUserId = unref(monoUserId);

  return axios.default.delete(`/api/mono/users/${monoUserId}`, options);
};

export const getDeleteMonoUserApiMonoUsersMonoUserIdDeleteMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMonoUserApiMonoUsersMonoUserIdDelete>>,
    TError,
    { monoUserId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMonoUserApiMonoUsersMonoUserIdDelete>>,
  TError,
  { monoUserId: number },
  TContext
> => {
  const mutationKey = ["deleteMonoUserApiMonoUsersMonoUserIdDelete"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMonoUserApiMonoUsersMonoUserIdDelete>>,
    { monoUserId: number }
  > = (props) => {
    const { monoUserId } = props ?? {};

    return deleteMonoUserApiMonoUsersMonoUserIdDelete(monoUserId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMonoUserApiMonoUsersMonoUserIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteMonoUserApiMonoUsersMonoUserIdDelete>>
  >;

export type DeleteMonoUserApiMonoUsersMonoUserIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Mono User
 */
export const useDeleteMonoUserApiMonoUsersMonoUserIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMonoUserApiMonoUsersMonoUserIdDelete>>,
    TError,
    { monoUserId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteMonoUserApiMonoUsersMonoUserIdDelete>>,
  TError,
  { monoUserId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteMonoUserApiMonoUsersMonoUserIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Mono
 * @summary Edit Mono User
 */
export const editMonoUserApiMonoUsersMonoUserIdPatch = (
  monoUserId: MaybeRef<number>,
  monoUserUpdate: MaybeRef<MonoUserUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoUserId = unref(monoUserId);
  monoUserUpdate = unref(monoUserUpdate);

  return axios.default.patch(
    `/api/mono/users/${monoUserId}`,
    monoUserUpdate,
    options
  );
};

export const getEditMonoUserApiMonoUsersMonoUserIdPatchMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editMonoUserApiMonoUsersMonoUserIdPatch>>,
    TError,
    { monoUserId: number; data: MonoUserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof editMonoUserApiMonoUsersMonoUserIdPatch>>,
  TError,
  { monoUserId: number; data: MonoUserUpdate },
  TContext
> => {
  const mutationKey = ["editMonoUserApiMonoUsersMonoUserIdPatch"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editMonoUserApiMonoUsersMonoUserIdPatch>>,
    { monoUserId: number; data: MonoUserUpdate }
  > = (props) => {
    const { monoUserId, data } = props ?? {};

    return editMonoUserApiMonoUsersMonoUserIdPatch(
      monoUserId,
      data,
      axiosOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type EditMonoUserApiMonoUsersMonoUserIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof editMonoUserApiMonoUsersMonoUserIdPatch>>
>;
export type EditMonoUserApiMonoUsersMonoUserIdPatchMutationBody =
  MonoUserUpdate;
export type EditMonoUserApiMonoUsersMonoUserIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Edit Mono User
 */
export const useEditMonoUserApiMonoUsersMonoUserIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editMonoUserApiMonoUsersMonoUserIdPatch>>,
    TError,
    { monoUserId: number; data: MonoUserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editMonoUserApiMonoUsersMonoUserIdPatch>>,
  TError,
  { monoUserId: number; data: MonoUserUpdate },
  TContext
> => {
  const mutationOptions =
    getEditMonoUserApiMonoUsersMonoUserIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Mono
 * @summary Get Mono User
 */
export const getMonoUserApiMonoUsersMonoUserIdGet = (
  monoUserId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoUserId = unref(monoUserId);

  return axios.default.get(`/api/mono/users/${monoUserId}`, options);
};

export const getGetMonoUserApiMonoUsersMonoUserIdGetQueryKey = (
  monoUserId: MaybeRef<number>
) => {
  return ["api", "mono", "users", monoUserId] as const;
};

export const getGetMonoUserApiMonoUsersMonoUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMonoUserApiMonoUsersMonoUserIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  monoUserId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMonoUserApiMonoUsersMonoUserIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetMonoUserApiMonoUsersMonoUserIdGetQueryKey(monoUserId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMonoUserApiMonoUsersMonoUserIdGet>>
  > = ({ signal }) =>
    getMonoUserApiMonoUsersMonoUserIdGet(monoUserId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(monoUserId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMonoUserApiMonoUsersMonoUserIdGet>>,
    TError,
    TData
  >;
};

export type GetMonoUserApiMonoUsersMonoUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMonoUserApiMonoUsersMonoUserIdGet>>
>;
export type GetMonoUserApiMonoUsersMonoUserIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Mono User
 */

export function useGetMonoUserApiMonoUsersMonoUserIdGet<
  TData = Awaited<ReturnType<typeof getMonoUserApiMonoUsersMonoUserIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  monoUserId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMonoUserApiMonoUsersMonoUserIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMonoUserApiMonoUsersMonoUserIdGetQueryOptions(
    monoUserId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
