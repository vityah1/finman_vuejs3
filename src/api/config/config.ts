/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  ConfigCreate,
  ConfigUpdate,
  HTTPValidationError,
} from ".././model";

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–∏–ø—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
 * @summary Get Config Types
 */
export const getConfigTypesApiConfigConfigTypesGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/config/config_types`, options);
};

export const getGetConfigTypesApiConfigConfigTypesGetQueryKey = () => {
  return ["api", "config", "config_types"] as const;
};

export const getGetConfigTypesApiConfigConfigTypesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getConfigTypesApiConfigConfigTypesGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getConfigTypesApiConfigConfigTypesGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetConfigTypesApiConfigConfigTypesGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConfigTypesApiConfigConfigTypesGet>>
  > = ({ signal }) =>
    getConfigTypesApiConfigConfigTypesGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getConfigTypesApiConfigConfigTypesGet>>,
    TError,
    TData
  >;
};

export type GetConfigTypesApiConfigConfigTypesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConfigTypesApiConfigConfigTypesGet>>
>;
export type GetConfigTypesApiConfigConfigTypesGetQueryError =
  AxiosError<unknown>;

/**
 * @summary Get Config Types
 */

export function useGetConfigTypesApiConfigConfigTypesGet<
  TData = Awaited<ReturnType<typeof getConfigTypesApiConfigConfigTypesGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getConfigTypesApiConfigConfigTypesGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetConfigTypesApiConfigConfigTypesGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @summary Get User Config
 */
export const getUserConfigApiUsersConfigGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/users/config`, options);
};

export const getGetUserConfigApiUsersConfigGetQueryKey = () => {
  return ["api", "users", "config"] as const;
};

export const getGetUserConfigApiUsersConfigGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserConfigApiUsersConfigGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUserConfigApiUsersConfigGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetUserConfigApiUsersConfigGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserConfigApiUsersConfigGet>>
  > = ({ signal }) =>
    getUserConfigApiUsersConfigGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserConfigApiUsersConfigGet>>,
    TError,
    TData
  >;
};

export type GetUserConfigApiUsersConfigGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserConfigApiUsersConfigGet>>
>;
export type GetUserConfigApiUsersConfigGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get User Config
 */

export function useGetUserConfigApiUsersConfigGet<
  TData = Awaited<ReturnType<typeof getUserConfigApiUsersConfigGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUserConfigApiUsersConfigGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserConfigApiUsersConfigGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
 * @summary Add Config
 */
export const addConfigApiUsersConfigPost = (
  configCreate: MaybeRef<ConfigCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  configCreate = unref(configCreate);

  return axios.post(`/api/users/config`, configCreate, options);
};

export const getAddConfigApiUsersConfigPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addConfigApiUsersConfigPost>>,
    TError,
    { data: ConfigCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addConfigApiUsersConfigPost>>,
  TError,
  { data: ConfigCreate },
  TContext
> => {
  const mutationKey = ["addConfigApiUsersConfigPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addConfigApiUsersConfigPost>>,
    { data: ConfigCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addConfigApiUsersConfigPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddConfigApiUsersConfigPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addConfigApiUsersConfigPost>>
>;
export type AddConfigApiUsersConfigPostMutationBody = ConfigCreate;
export type AddConfigApiUsersConfigPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Add Config
 */
export const useAddConfigApiUsersConfigPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addConfigApiUsersConfigPost>>,
    TError,
    { data: ConfigCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof addConfigApiUsersConfigPost>>,
  TError,
  { data: ConfigCreate },
  TContext
> => {
  const mutationOptions =
    getAddConfigApiUsersConfigPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
 * @summary Delete Config
 */
export const deleteConfigApiConfigConfigIdDelete = (
  configId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  configId = unref(configId);

  return axios.delete(`/api/config/${configId}`, options);
};

export const getDeleteConfigApiConfigConfigIdDeleteMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteConfigApiConfigConfigIdDelete>>,
    TError,
    { configId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteConfigApiConfigConfigIdDelete>>,
  TError,
  { configId: number },
  TContext
> => {
  const mutationKey = ["deleteConfigApiConfigConfigIdDelete"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteConfigApiConfigConfigIdDelete>>,
    { configId: number }
  > = (props) => {
    const { configId } = props ?? {};

    return deleteConfigApiConfigConfigIdDelete(configId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteConfigApiConfigConfigIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteConfigApiConfigConfigIdDelete>>
>;

export type DeleteConfigApiConfigConfigIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Config
 */
export const useDeleteConfigApiConfigConfigIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteConfigApiConfigConfigIdDelete>>,
    TError,
    { configId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteConfigApiConfigConfigIdDelete>>,
  TError,
  { configId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteConfigApiConfigConfigIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
 * @summary Edit Config
 */
export const editConfigApiConfigConfigIdPatch = (
  configId: MaybeRef<number>,
  configUpdate: MaybeRef<ConfigUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  configId = unref(configId);
  configUpdate = unref(configUpdate);

  return axios.patch(`/api/config/${configId}`, configUpdate, options);
};

export const getEditConfigApiConfigConfigIdPatchMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editConfigApiConfigConfigIdPatch>>,
    TError,
    { configId: number; data: ConfigUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof editConfigApiConfigConfigIdPatch>>,
  TError,
  { configId: number; data: ConfigUpdate },
  TContext
> => {
  const mutationKey = ["editConfigApiConfigConfigIdPatch"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editConfigApiConfigConfigIdPatch>>,
    { configId: number; data: ConfigUpdate }
  > = (props) => {
    const { configId, data } = props ?? {};

    return editConfigApiConfigConfigIdPatch(configId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EditConfigApiConfigConfigIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof editConfigApiConfigConfigIdPatch>>
>;
export type EditConfigApiConfigConfigIdPatchMutationBody = ConfigUpdate;
export type EditConfigApiConfigConfigIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Edit Config
 */
export const useEditConfigApiConfigConfigIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editConfigApiConfigConfigIdPatch>>,
    TError,
    { configId: number; data: ConfigUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editConfigApiConfigConfigIdPatch>>,
  TError,
  { configId: number; data: ConfigUpdate },
  TContext
> => {
  const mutationOptions =
    getEditConfigApiConfigConfigIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–∞ ID
 * @summary Get Config
 */
export const getConfigApiConfigConfigIdGet = (
  configId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  configId = unref(configId);

  return axios.get(`/api/config/${configId}`, options);
};

export const getGetConfigApiConfigConfigIdGetQueryKey = (
  configId: MaybeRef<number>
) => {
  return ["api", "config", configId] as const;
};

export const getGetConfigApiConfigConfigIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getConfigApiConfigConfigIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  configId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConfigApiConfigConfigIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetConfigApiConfigConfigIdGetQueryKey(configId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getConfigApiConfigConfigIdGet>>
  > = ({ signal }) =>
    getConfigApiConfigConfigIdGet(configId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(configId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getConfigApiConfigConfigIdGet>>,
    TError,
    TData
  >;
};

export type GetConfigApiConfigConfigIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConfigApiConfigConfigIdGet>>
>;
export type GetConfigApiConfigConfigIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Config
 */

export function useGetConfigApiConfigConfigIdGet<
  TData = Awaited<ReturnType<typeof getConfigApiConfigConfigIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  configId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getConfigApiConfigConfigIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetConfigApiConfigConfigIdGetQueryOptions(
    configId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
