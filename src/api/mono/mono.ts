/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  HTTPValidationError,
  MonoPaymentProcessRequest,
  MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody,
  MonoWebhookRequest,
} from ".././model";

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ Monobank
 * @summary Get User Mono Users Info
 */
export const getUserMonoUsersInfoApiUsersUserIdMonoInfoGet = (
  userId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  userId = unref(userId);

  return axios.get(`/api/users/${userId}/mono/info/`, options);
};

export const getGetUserMonoUsersInfoApiUsersUserIdMonoInfoGetQueryKey = (
  userId: MaybeRef<number>
) => {
  return ["api", "users", userId, "mono", "info"] as const;
};

export const getGetUserMonoUsersInfoApiUsersUserIdMonoInfoGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getUserMonoUsersInfoApiUsersUserIdMonoInfoGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  userId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getUserMonoUsersInfoApiUsersUserIdMonoInfoGet>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    getGetUserMonoUsersInfoApiUsersUserIdMonoInfoGetQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserMonoUsersInfoApiUsersUserIdMonoInfoGet>>
  > = ({ signal }) =>
    getUserMonoUsersInfoApiUsersUserIdMonoInfoGet(userId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(userId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserMonoUsersInfoApiUsersUserIdMonoInfoGet>>,
    TError,
    TData
  >;
};

export type GetUserMonoUsersInfoApiUsersUserIdMonoInfoGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getUserMonoUsersInfoApiUsersUserIdMonoInfoGet>>
  >;
export type GetUserMonoUsersInfoApiUsersUserIdMonoInfoGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get User Mono Users Info
 */

export function useGetUserMonoUsersInfoApiUsersUserIdMonoInfoGet<
  TData = Awaited<
    ReturnType<typeof getUserMonoUsersInfoApiUsersUserIdMonoInfoGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  userId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getUserMonoUsersInfoApiUsersUserIdMonoInfoGet>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetUserMonoUsersInfoApiUsersUserIdMonoInfoGetQueryOptions(
      userId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Monobank
 * @summary Get Mono User Info
 */
export const getMonoUserInfoApiMonoUsersMonoUserIdInfoGet = (
  monoUserId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoUserId = unref(monoUserId);

  return axios.get(`/api/mono/users/${monoUserId}/info/`, options);
};

export const getGetMonoUserInfoApiMonoUsersMonoUserIdInfoGetQueryKey = (
  monoUserId: MaybeRef<number>
) => {
  return ["api", "mono", "users", monoUserId, "info"] as const;
};

export const getGetMonoUserInfoApiMonoUsersMonoUserIdInfoGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getMonoUserInfoApiMonoUsersMonoUserIdInfoGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  monoUserId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getMonoUserInfoApiMonoUsersMonoUserIdInfoGet>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    getGetMonoUserInfoApiMonoUsersMonoUserIdInfoGetQueryKey(monoUserId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMonoUserInfoApiMonoUsersMonoUserIdInfoGet>>
  > = ({ signal }) =>
    getMonoUserInfoApiMonoUsersMonoUserIdInfoGet(monoUserId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(monoUserId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMonoUserInfoApiMonoUsersMonoUserIdInfoGet>>,
    TError,
    TData
  >;
};

export type GetMonoUserInfoApiMonoUsersMonoUserIdInfoGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getMonoUserInfoApiMonoUsersMonoUserIdInfoGet>>
  >;
export type GetMonoUserInfoApiMonoUsersMonoUserIdInfoGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Mono User Info
 */

export function useGetMonoUserInfoApiMonoUsersMonoUserIdInfoGet<
  TData = Awaited<
    ReturnType<typeof getMonoUserInfoApiMonoUsersMonoUserIdInfoGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  monoUserId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getMonoUserInfoApiMonoUsersMonoUserIdInfoGet>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetMonoUserInfoApiMonoUsersMonoUserIdInfoGetQueryOptions(
      monoUserId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –≤–µ–±—Ö—É–∫ –¥–ª—è Monobank
 * @summary Set Webhook
 */
export const setWebhookApiMonoUsersMonoUserIdWebhookPut = (
  monoUserId: MaybeRef<number>,
  monoWebhookRequest: MaybeRef<MonoWebhookRequest>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoUserId = unref(monoUserId);
  monoWebhookRequest = unref(monoWebhookRequest);

  return axios.put(
    `/api/mono/users/${monoUserId}/webhook`,
    monoWebhookRequest,
    options
  );
};

export const getSetWebhookApiMonoUsersMonoUserIdWebhookPutMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setWebhookApiMonoUsersMonoUserIdWebhookPut>>,
    TError,
    { monoUserId: number; data: MonoWebhookRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setWebhookApiMonoUsersMonoUserIdWebhookPut>>,
  TError,
  { monoUserId: number; data: MonoWebhookRequest },
  TContext
> => {
  const mutationKey = ["setWebhookApiMonoUsersMonoUserIdWebhookPut"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setWebhookApiMonoUsersMonoUserIdWebhookPut>>,
    { monoUserId: number; data: MonoWebhookRequest }
  > = (props) => {
    const { monoUserId, data } = props ?? {};

    return setWebhookApiMonoUsersMonoUserIdWebhookPut(
      monoUserId,
      data,
      axiosOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type SetWebhookApiMonoUsersMonoUserIdWebhookPutMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof setWebhookApiMonoUsersMonoUserIdWebhookPut>>
  >;
export type SetWebhookApiMonoUsersMonoUserIdWebhookPutMutationBody =
  MonoWebhookRequest;
export type SetWebhookApiMonoUsersMonoUserIdWebhookPutMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Set Webhook
 */
export const useSetWebhookApiMonoUsersMonoUserIdWebhookPut = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setWebhookApiMonoUsersMonoUserIdWebhookPut>>,
    TError,
    { monoUserId: number; data: MonoWebhookRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof setWebhookApiMonoUsersMonoUserIdWebhookPut>>,
  TError,
  { monoUserId: number; data: MonoWebhookRequest },
  TContext
> => {
  const mutationOptions =
    getSetWebhookApiMonoUsersMonoUserIdWebhookPutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –¢–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫—ñ–≤ Monobank
 * @summary Mono Webhook Test Handler
 */
export const monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet = (
  monoUserId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoUserId = unref(monoUserId);

  return axios.get(`/api/mono/users/${monoUserId}/webhook`, options);
};

export const getMonoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGetQueryKey =
  (monoUserId: MaybeRef<number>) => {
    return ["api", "mono", "users", monoUserId, "webhook"] as const;
  };

export const getMonoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet>
    >,
    TError = AxiosError<HTTPValidationError>
  >(
    monoUserId: MaybeRef<number>,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet
            >
          >,
          TError,
          TData
        >
      >;
      axios?: AxiosRequestConfig;
    }
  ) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
      getMonoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGetQueryKey(
        monoUserId
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet
        >
      >
    > = ({ signal }) =>
      monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet(monoUserId, {
        signal,
        ...axiosOptions,
      });

    return {
      queryKey,
      queryFn,
      enabled: computed(() => !!unref(monoUserId)),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet
        >
      >,
      TError,
      TData
    >;
  };

export type MonoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet>
    >
  >;
export type MonoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Mono Webhook Test Handler
 */

export function useMonoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet<
  TData = Awaited<
    ReturnType<typeof monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  monoUserId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof monoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGet
          >
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getMonoWebhookTestHandlerApiMonoUsersMonoUserIdWebhookGetQueryOptions(
      monoUserId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫—ñ–≤ –≤—ñ–¥ Monobank
 * @summary Mono Webhook Handler
 */
export const monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost = (
  monoUserId: MaybeRef<number>,
  monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody: MaybeRef<MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoUserId = unref(monoUserId);
  monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody = unref(
    monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody
  );

  return axios.post(
    `/api/mono/users/${monoUserId}/webhook`,
    monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody,
    options
  );
};

export const getMonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost>
      >,
      TError,
      {
        monoUserId: number;
        data: MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost>
    >,
    TError,
    {
      monoUserId: number;
      data: MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody;
    },
    TContext
  > => {
    const mutationKey = ["monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost>
      >,
      {
        monoUserId: number;
        data: MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody;
      }
    > = (props) => {
      const { monoUserId, data } = props ?? {};

      return monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost(
        monoUserId,
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost>
    >
  >;
export type MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostMutationBody =
  MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody;
export type MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Mono Webhook Handler
 */
export const useMonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost>
    >,
    TError,
    {
      monoUserId: number;
      data: MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<
    ReturnType<typeof monoWebhookHandlerApiMonoUsersMonoUserIdWebhookPost>
  >,
  TError,
  {
    monoUserId: number;
    data: MonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostBody;
  },
  TContext
> => {
  const mutationOptions =
    getMonoWebhookHandlerApiMonoUsersMonoUserIdWebhookPostMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
/**
 * –û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—ñ–≤ –≤—ñ–¥ Monobank
 * @summary Get Mono Data Pmts
 */
export const getMonoDataPmtsApiMonoPaymentsPost = (
  monoPaymentProcessRequest: MaybeRef<MonoPaymentProcessRequest>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  monoPaymentProcessRequest = unref(monoPaymentProcessRequest);

  return axios.post(`/api/mono/payments`, monoPaymentProcessRequest, options);
};

export const getGetMonoDataPmtsApiMonoPaymentsPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getMonoDataPmtsApiMonoPaymentsPost>>,
    TError,
    { data: MonoPaymentProcessRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof getMonoDataPmtsApiMonoPaymentsPost>>,
  TError,
  { data: MonoPaymentProcessRequest },
  TContext
> => {
  const mutationKey = ["getMonoDataPmtsApiMonoPaymentsPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getMonoDataPmtsApiMonoPaymentsPost>>,
    { data: MonoPaymentProcessRequest }
  > = (props) => {
    const { data } = props ?? {};

    return getMonoDataPmtsApiMonoPaymentsPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GetMonoDataPmtsApiMonoPaymentsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof getMonoDataPmtsApiMonoPaymentsPost>>
>;
export type GetMonoDataPmtsApiMonoPaymentsPostMutationBody =
  MonoPaymentProcessRequest;
export type GetMonoDataPmtsApiMonoPaymentsPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Mono Data Pmts
 */
export const useGetMonoDataPmtsApiMonoPaymentsPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getMonoDataPmtsApiMonoPaymentsPost>>,
    TError,
    { data: MonoPaymentProcessRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof getMonoDataPmtsApiMonoPaymentsPost>>,
  TError,
  { data: MonoPaymentProcessRequest },
  TContext
> => {
  const mutationOptions =
    getGetMonoDataPmtsApiMonoPaymentsPostMutationOptions(options);

  return useMutation(mutationOptions);
};
