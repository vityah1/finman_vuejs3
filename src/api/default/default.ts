/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/vue-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType,
} from "@tanstack/vue-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  BodyImportBankStatementApiImportPost,
  HTTPValidationError,
} from ".././model";

/**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –≤–∏–ø–∏—Å–æ–∫

–ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    file: –§–∞–π–ª –∑ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏
    mode: –¢–∏–ø –±–∞–Ω–∫—É (wise, p24, revolut, pumb, erste)
    action: –î—ñ—è - 'show' –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–±–æ 'import' –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö
 * @summary Import Bank Statement
 */
export const importBankStatementApiImportPost = (
  bodyImportBankStatementApiImportPost: MaybeRef<BodyImportBankStatementApiImportPost>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  bodyImportBankStatementApiImportPost = unref(
    bodyImportBankStatementApiImportPost
  );
  const formData = new FormData();
  formData.append("file", bodyImportBankStatementApiImportPost.file);
  formData.append("mode", bodyImportBankStatementApiImportPost.mode);
  if (bodyImportBankStatementApiImportPost.action !== undefined) {
    formData.append("action", bodyImportBankStatementApiImportPost.action);
  }

  return axios.post(`/api/import`, formData, options);
};

export const getImportBankStatementApiImportPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importBankStatementApiImportPost>>,
    TError,
    { data: BodyImportBankStatementApiImportPost },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof importBankStatementApiImportPost>>,
  TError,
  { data: BodyImportBankStatementApiImportPost },
  TContext
> => {
  const mutationKey = ["importBankStatementApiImportPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof importBankStatementApiImportPost>>,
    { data: BodyImportBankStatementApiImportPost }
  > = (props) => {
    const { data } = props ?? {};

    return importBankStatementApiImportPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImportBankStatementApiImportPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof importBankStatementApiImportPost>>
>;
export type ImportBankStatementApiImportPostMutationBody =
  BodyImportBankStatementApiImportPost;
export type ImportBankStatementApiImportPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Import Bank Statement
 */
export const useImportBankStatementApiImportPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importBankStatementApiImportPost>>,
    TError,
    { data: BodyImportBankStatementApiImportPost },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof importBankStatementApiImportPost>>,
  TError,
  { data: BodyImportBankStatementApiImportPost },
  TContext
> => {
  const mutationOptions =
    getImportBankStatementApiImportPostMutationOptions(options);

  return useMutation(mutationOptions);
};
