/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  CategoryCreate,
  CategoryUpdate,
  HTTPValidationError,
} from ".././model";

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @summary Get Categories
 */
export const getCategoriesApiCategoriesGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/categories`, options);
};

export const getGetCategoriesApiCategoriesGetQueryKey = () => {
  return ["api", "categories"] as const;
};

export const getGetCategoriesApiCategoriesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetCategoriesApiCategoriesGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>
  > = ({ signal }) =>
    getCategoriesApiCategoriesGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>,
    TError,
    TData
  >;
};

export type GetCategoriesApiCategoriesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>
>;
export type GetCategoriesApiCategoriesGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Categories
 */

export function useGetCategoriesApiCategoriesGet<
  TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCategoriesApiCategoriesGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 * @summary Add Category
 */
export const addCategoryApiCategoriesPost = (
  categoryCreate: MaybeRef<CategoryCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  categoryCreate = unref(categoryCreate);

  return axios.post(`/api/categories`, categoryCreate, options);
};

export const getAddCategoryApiCategoriesPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCategoryApiCategoriesPost>>,
    TError,
    { data: CategoryCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addCategoryApiCategoriesPost>>,
  TError,
  { data: CategoryCreate },
  TContext
> => {
  const mutationKey = ["addCategoryApiCategoriesPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addCategoryApiCategoriesPost>>,
    { data: CategoryCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addCategoryApiCategoriesPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddCategoryApiCategoriesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addCategoryApiCategoriesPost>>
>;
export type AddCategoryApiCategoriesPostMutationBody = CategoryCreate;
export type AddCategoryApiCategoriesPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Add Category
 */
export const useAddCategoryApiCategoriesPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCategoryApiCategoriesPost>>,
    TError,
    { data: CategoryCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof addCategoryApiCategoriesPost>>,
  TError,
  { data: CategoryCreate },
  TContext
> => {
  const mutationOptions =
    getAddCategoryApiCategoriesPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID
 * @summary Delete Category
 */
export const deleteCategoryApiCategoriesCategoryIdDelete = (
  categoryId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  categoryId = unref(categoryId);

  return axios.delete(`/api/categories/${categoryId}`, options);
};

export const getDeleteCategoryApiCategoriesCategoryIdDeleteMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategoryApiCategoriesCategoryIdDelete>>,
    TError,
    { categoryId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCategoryApiCategoriesCategoryIdDelete>>,
  TError,
  { categoryId: number },
  TContext
> => {
  const mutationKey = ["deleteCategoryApiCategoriesCategoryIdDelete"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCategoryApiCategoriesCategoryIdDelete>>,
    { categoryId: number }
  > = (props) => {
    const { categoryId } = props ?? {};

    return deleteCategoryApiCategoriesCategoryIdDelete(
      categoryId,
      axiosOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCategoryApiCategoriesCategoryIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteCategoryApiCategoriesCategoryIdDelete>>
  >;

export type DeleteCategoryApiCategoriesCategoryIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Category
 */
export const useDeleteCategoryApiCategoriesCategoryIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategoryApiCategoriesCategoryIdDelete>>,
    TError,
    { categoryId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteCategoryApiCategoriesCategoryIdDelete>>,
  TError,
  { categoryId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteCategoryApiCategoriesCategoryIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID
 * @summary Edit Category
 */
export const editCategoryApiCategoriesCategoryIdPatch = (
  categoryId: MaybeRef<number>,
  categoryUpdate: MaybeRef<CategoryUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  categoryId = unref(categoryId);
  categoryUpdate = unref(categoryUpdate);

  return axios.patch(`/api/categories/${categoryId}`, categoryUpdate, options);
};

export const getEditCategoryApiCategoriesCategoryIdPatchMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editCategoryApiCategoriesCategoryIdPatch>>,
    TError,
    { categoryId: number; data: CategoryUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof editCategoryApiCategoriesCategoryIdPatch>>,
  TError,
  { categoryId: number; data: CategoryUpdate },
  TContext
> => {
  const mutationKey = ["editCategoryApiCategoriesCategoryIdPatch"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editCategoryApiCategoriesCategoryIdPatch>>,
    { categoryId: number; data: CategoryUpdate }
  > = (props) => {
    const { categoryId, data } = props ?? {};

    return editCategoryApiCategoriesCategoryIdPatch(
      categoryId,
      data,
      axiosOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type EditCategoryApiCategoriesCategoryIdPatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof editCategoryApiCategoriesCategoryIdPatch>>
  >;
export type EditCategoryApiCategoriesCategoryIdPatchMutationBody =
  CategoryUpdate;
export type EditCategoryApiCategoriesCategoryIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Edit Category
 */
export const useEditCategoryApiCategoriesCategoryIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editCategoryApiCategoriesCategoryIdPatch>>,
    TError,
    { categoryId: number; data: CategoryUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editCategoryApiCategoriesCategoryIdPatch>>,
  TError,
  { categoryId: number; data: CategoryUpdate },
  TContext
> => {
  const mutationOptions =
    getEditCategoryApiCategoriesCategoryIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID
 * @summary Get Category
 */
export const getCategoryApiCategoriesCategoryIdGet = (
  categoryId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  categoryId = unref(categoryId);

  return axios.get(`/api/categories/${categoryId}`, options);
};

export const getGetCategoryApiCategoriesCategoryIdGetQueryKey = (
  categoryId: MaybeRef<number>
) => {
  return ["api", "categories", categoryId] as const;
};

export const getGetCategoryApiCategoriesCategoryIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoryApiCategoriesCategoryIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  categoryId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryApiCategoriesCategoryIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetCategoryApiCategoriesCategoryIdGetQueryKey(categoryId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCategoryApiCategoriesCategoryIdGet>>
  > = ({ signal }) =>
    getCategoryApiCategoriesCategoryIdGet(categoryId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(categoryId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoryApiCategoriesCategoryIdGet>>,
    TError,
    TData
  >;
};

export type GetCategoryApiCategoriesCategoryIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoryApiCategoriesCategoryIdGet>>
>;
export type GetCategoryApiCategoriesCategoryIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Category
 */

export function useGetCategoryApiCategoriesCategoryIdGet<
  TData = Awaited<ReturnType<typeof getCategoryApiCategoriesCategoryIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  categoryId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryApiCategoriesCategoryIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCategoryApiCategoriesCategoryIdGetQueryOptions(
    categoryId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
