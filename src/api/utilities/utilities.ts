/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  CreateBatchReadingsApiUtilitiesReadingsBatchPostBody,
  GetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetParams,
  GetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetParams,
  GetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetParams,
  GetReadingsApiUtilitiesReadingsGetParams,
  GetServicesApiUtilitiesServicesGetParams,
  GetTariffsApiUtilitiesTariffsGetParams,
  GroupedReadingsResponse,
  HTTPValidationError,
  LatestPeriodResponse,
  UtilityAddressCreate,
  UtilityAddressUpdate,
  UtilityReadingCreate,
  UtilityReadingUpdate,
  UtilityServiceCreate,
  UtilityServiceUpdate,
  UtilityTariffCreate,
  UtilityTariffResponse,
  UtilityTariffUpdate,
} from ".././model";

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–¥—Ä–µ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @summary Get Addresses
 */
export const getAddressesApiUtilitiesAddressesGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/utilities/addresses`, options);
};

export const getGetAddressesApiUtilitiesAddressesGetQueryKey = () => {
  return ["api", "utilities", "addresses"] as const;
};

export const getGetAddressesApiUtilitiesAddressesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAddressesApiUtilitiesAddressesGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAddressesApiUtilitiesAddressesGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetAddressesApiUtilitiesAddressesGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAddressesApiUtilitiesAddressesGet>>
  > = ({ signal }) =>
    getAddressesApiUtilitiesAddressesGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAddressesApiUtilitiesAddressesGet>>,
    TError,
    TData
  >;
};

export type GetAddressesApiUtilitiesAddressesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAddressesApiUtilitiesAddressesGet>>
>;
export type GetAddressesApiUtilitiesAddressesGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Addresses
 */

export function useGetAddressesApiUtilitiesAddressesGet<
  TData = Awaited<ReturnType<typeof getAddressesApiUtilitiesAddressesGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAddressesApiUtilitiesAddressesGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetAddressesApiUtilitiesAddressesGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É
 * @summary Create Address
 */
export const createAddressApiUtilitiesAddressesPost = (
  utilityAddressCreate: MaybeRef<UtilityAddressCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  utilityAddressCreate = unref(utilityAddressCreate);

  return axios.post(`/api/utilities/addresses`, utilityAddressCreate, options);
};

export const getCreateAddressApiUtilitiesAddressesPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAddressApiUtilitiesAddressesPost>>,
    TError,
    { data: UtilityAddressCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAddressApiUtilitiesAddressesPost>>,
  TError,
  { data: UtilityAddressCreate },
  TContext
> => {
  const mutationKey = ["createAddressApiUtilitiesAddressesPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAddressApiUtilitiesAddressesPost>>,
    { data: UtilityAddressCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createAddressApiUtilitiesAddressesPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAddressApiUtilitiesAddressesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAddressApiUtilitiesAddressesPost>>
>;
export type CreateAddressApiUtilitiesAddressesPostMutationBody =
  UtilityAddressCreate;
export type CreateAddressApiUtilitiesAddressesPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Create Address
 */
export const useCreateAddressApiUtilitiesAddressesPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAddressApiUtilitiesAddressesPost>>,
    TError,
    { data: UtilityAddressCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createAddressApiUtilitiesAddressesPost>>,
  TError,
  { data: UtilityAddressCreate },
  TContext
> => {
  const mutationOptions =
    getCreateAddressApiUtilitiesAddressesPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–∞ ID
 * @summary Get Address
 */
export const getAddressApiUtilitiesAddressesAddressIdGet = (
  addressId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  addressId = unref(addressId);

  return axios.get(`/api/utilities/addresses/${addressId}`, options);
};

export const getGetAddressApiUtilitiesAddressesAddressIdGetQueryKey = (
  addressId: MaybeRef<number>
) => {
  return ["api", "utilities", "addresses", addressId] as const;
};

export const getGetAddressApiUtilitiesAddressesAddressIdGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getAddressApiUtilitiesAddressesAddressIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  addressId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddressApiUtilitiesAddressesAddressIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    getGetAddressApiUtilitiesAddressesAddressIdGetQueryKey(addressId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAddressApiUtilitiesAddressesAddressIdGet>>
  > = ({ signal }) =>
    getAddressApiUtilitiesAddressesAddressIdGet(addressId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(addressId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAddressApiUtilitiesAddressesAddressIdGet>>,
    TError,
    TData
  >;
};

export type GetAddressApiUtilitiesAddressesAddressIdGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getAddressApiUtilitiesAddressesAddressIdGet>>
  >;
export type GetAddressApiUtilitiesAddressesAddressIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Address
 */

export function useGetAddressApiUtilitiesAddressesAddressIdGet<
  TData = Awaited<
    ReturnType<typeof getAddressApiUtilitiesAddressesAddressIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  addressId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAddressApiUtilitiesAddressesAddressIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetAddressApiUtilitiesAddressesAddressIdGetQueryOptions(
      addressId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û–Ω–æ–≤–∏—Ç–∏ –∞–¥—Ä–µ—Å—É
 * @summary Update Address
 */
export const updateAddressApiUtilitiesAddressesAddressIdPatch = (
  addressId: MaybeRef<number>,
  utilityAddressUpdate: MaybeRef<UtilityAddressUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  addressId = unref(addressId);
  utilityAddressUpdate = unref(utilityAddressUpdate);

  return axios.patch(
    `/api/utilities/addresses/${addressId}`,
    utilityAddressUpdate,
    options
  );
};

export const getUpdateAddressApiUtilitiesAddressesAddressIdPatchMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof updateAddressApiUtilitiesAddressesAddressIdPatch>
      >,
      TError,
      { addressId: number; data: UtilityAddressUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof updateAddressApiUtilitiesAddressesAddressIdPatch>
    >,
    TError,
    { addressId: number; data: UtilityAddressUpdate },
    TContext
  > => {
    const mutationKey = ["updateAddressApiUtilitiesAddressesAddressIdPatch"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof updateAddressApiUtilitiesAddressesAddressIdPatch>
      >,
      { addressId: number; data: UtilityAddressUpdate }
    > = (props) => {
      const { addressId, data } = props ?? {};

      return updateAddressApiUtilitiesAddressesAddressIdPatch(
        addressId,
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateAddressApiUtilitiesAddressesAddressIdPatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateAddressApiUtilitiesAddressesAddressIdPatch>>
  >;
export type UpdateAddressApiUtilitiesAddressesAddressIdPatchMutationBody =
  UtilityAddressUpdate;
export type UpdateAddressApiUtilitiesAddressesAddressIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Update Address
 */
export const useUpdateAddressApiUtilitiesAddressesAddressIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof updateAddressApiUtilitiesAddressesAddressIdPatch>
    >,
    TError,
    { addressId: number; data: UtilityAddressUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateAddressApiUtilitiesAddressesAddressIdPatch>>,
  TError,
  { addressId: number; data: UtilityAddressUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateAddressApiUtilitiesAddressesAddressIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É
 * @summary Delete Address
 */
export const deleteAddressApiUtilitiesAddressesAddressIdDelete = (
  addressId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  addressId = unref(addressId);

  return axios.delete(`/api/utilities/addresses/${addressId}`, options);
};

export const getDeleteAddressApiUtilitiesAddressesAddressIdDeleteMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteAddressApiUtilitiesAddressesAddressIdDelete>
      >,
      TError,
      { addressId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteAddressApiUtilitiesAddressesAddressIdDelete>
    >,
    TError,
    { addressId: number },
    TContext
  > => {
    const mutationKey = ["deleteAddressApiUtilitiesAddressesAddressIdDelete"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteAddressApiUtilitiesAddressesAddressIdDelete>
      >,
      { addressId: number }
    > = (props) => {
      const { addressId } = props ?? {};

      return deleteAddressApiUtilitiesAddressesAddressIdDelete(
        addressId,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteAddressApiUtilitiesAddressesAddressIdDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof deleteAddressApiUtilitiesAddressesAddressIdDelete>
    >
  >;

export type DeleteAddressApiUtilitiesAddressesAddressIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Address
 */
export const useDeleteAddressApiUtilitiesAddressesAddressIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteAddressApiUtilitiesAddressesAddressIdDelete>
    >,
    TError,
    { addressId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteAddressApiUtilitiesAddressesAddressIdDelete>>,
  TError,
  { addressId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteAddressApiUtilitiesAddressesAddressIdDeleteMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ —Å–ª—É–∂–±–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @summary Get Services
 */
export const getServicesApiUtilitiesServicesGet = (
  params?: MaybeRef<GetServicesApiUtilitiesServicesGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  params = unref(params);

  return axios.get(`/api/utilities/services`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetServicesApiUtilitiesServicesGetQueryKey = (
  params?: MaybeRef<GetServicesApiUtilitiesServicesGetParams>
) => {
  return ["api", "utilities", "services", ...(params ? [params] : [])] as const;
};

export const getGetServicesApiUtilitiesServicesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getServicesApiUtilitiesServicesGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<GetServicesApiUtilitiesServicesGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServicesApiUtilitiesServicesGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetServicesApiUtilitiesServicesGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getServicesApiUtilitiesServicesGet>>
  > = ({ signal }) =>
    getServicesApiUtilitiesServicesGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getServicesApiUtilitiesServicesGet>>,
    TError,
    TData
  >;
};

export type GetServicesApiUtilitiesServicesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getServicesApiUtilitiesServicesGet>>
>;
export type GetServicesApiUtilitiesServicesGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Services
 */

export function useGetServicesApiUtilitiesServicesGet<
  TData = Awaited<ReturnType<typeof getServicesApiUtilitiesServicesGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<GetServicesApiUtilitiesServicesGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServicesApiUtilitiesServicesGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetServicesApiUtilitiesServicesGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–æ–º—É–Ω–∞–ª—å–Ω—É —Å–ª—É–∂–±—É
 * @summary Create Service
 */
export const createServiceApiUtilitiesServicesPost = (
  utilityServiceCreate: MaybeRef<UtilityServiceCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  utilityServiceCreate = unref(utilityServiceCreate);

  return axios.post(`/api/utilities/services`, utilityServiceCreate, options);
};

export const getCreateServiceApiUtilitiesServicesPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createServiceApiUtilitiesServicesPost>>,
    TError,
    { data: UtilityServiceCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createServiceApiUtilitiesServicesPost>>,
  TError,
  { data: UtilityServiceCreate },
  TContext
> => {
  const mutationKey = ["createServiceApiUtilitiesServicesPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createServiceApiUtilitiesServicesPost>>,
    { data: UtilityServiceCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createServiceApiUtilitiesServicesPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateServiceApiUtilitiesServicesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createServiceApiUtilitiesServicesPost>>
>;
export type CreateServiceApiUtilitiesServicesPostMutationBody =
  UtilityServiceCreate;
export type CreateServiceApiUtilitiesServicesPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Create Service
 */
export const useCreateServiceApiUtilitiesServicesPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createServiceApiUtilitiesServicesPost>>,
    TError,
    { data: UtilityServiceCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createServiceApiUtilitiesServicesPost>>,
  TError,
  { data: UtilityServiceCreate },
  TContext
> => {
  const mutationOptions =
    getCreateServiceApiUtilitiesServicesPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω—É —Å–ª—É–∂–±—É –∑–∞ ID
 * @summary Get Service
 */
export const getServiceApiUtilitiesServicesServiceIdGet = (
  serviceId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  serviceId = unref(serviceId);

  return axios.get(`/api/utilities/services/${serviceId}`, options);
};

export const getGetServiceApiUtilitiesServicesServiceIdGetQueryKey = (
  serviceId: MaybeRef<number>
) => {
  return ["api", "utilities", "services", serviceId] as const;
};

export const getGetServiceApiUtilitiesServicesServiceIdGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getServiceApiUtilitiesServicesServiceIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  serviceId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServiceApiUtilitiesServicesServiceIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    getGetServiceApiUtilitiesServicesServiceIdGetQueryKey(serviceId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getServiceApiUtilitiesServicesServiceIdGet>>
  > = ({ signal }) =>
    getServiceApiUtilitiesServicesServiceIdGet(serviceId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(serviceId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getServiceApiUtilitiesServicesServiceIdGet>>,
    TError,
    TData
  >;
};

export type GetServiceApiUtilitiesServicesServiceIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getServiceApiUtilitiesServicesServiceIdGet>>
>;
export type GetServiceApiUtilitiesServicesServiceIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Service
 */

export function useGetServiceApiUtilitiesServicesServiceIdGet<
  TData = Awaited<
    ReturnType<typeof getServiceApiUtilitiesServicesServiceIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  serviceId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getServiceApiUtilitiesServicesServiceIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetServiceApiUtilitiesServicesServiceIdGetQueryOptions(
      serviceId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω—É —Å–ª—É–∂–±—É
 * @summary Update Service
 */
export const updateServiceApiUtilitiesServicesServiceIdPatch = (
  serviceId: MaybeRef<number>,
  utilityServiceUpdate: MaybeRef<UtilityServiceUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  serviceId = unref(serviceId);
  utilityServiceUpdate = unref(utilityServiceUpdate);

  return axios.patch(
    `/api/utilities/services/${serviceId}`,
    utilityServiceUpdate,
    options
  );
};

export const getUpdateServiceApiUtilitiesServicesServiceIdPatchMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof updateServiceApiUtilitiesServicesServiceIdPatch>
      >,
      TError,
      { serviceId: number; data: UtilityServiceUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof updateServiceApiUtilitiesServicesServiceIdPatch>>,
    TError,
    { serviceId: number; data: UtilityServiceUpdate },
    TContext
  > => {
    const mutationKey = ["updateServiceApiUtilitiesServicesServiceIdPatch"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof updateServiceApiUtilitiesServicesServiceIdPatch>
      >,
      { serviceId: number; data: UtilityServiceUpdate }
    > = (props) => {
      const { serviceId, data } = props ?? {};

      return updateServiceApiUtilitiesServicesServiceIdPatch(
        serviceId,
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateServiceApiUtilitiesServicesServiceIdPatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateServiceApiUtilitiesServicesServiceIdPatch>>
  >;
export type UpdateServiceApiUtilitiesServicesServiceIdPatchMutationBody =
  UtilityServiceUpdate;
export type UpdateServiceApiUtilitiesServicesServiceIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Update Service
 */
export const useUpdateServiceApiUtilitiesServicesServiceIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateServiceApiUtilitiesServicesServiceIdPatch>>,
    TError,
    { serviceId: number; data: UtilityServiceUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateServiceApiUtilitiesServicesServiceIdPatch>>,
  TError,
  { serviceId: number; data: UtilityServiceUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateServiceApiUtilitiesServicesServiceIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω—É —Å–ª—É–∂–±—É
 * @summary Delete Service
 */
export const deleteServiceApiUtilitiesServicesServiceIdDelete = (
  serviceId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  serviceId = unref(serviceId);

  return axios.delete(`/api/utilities/services/${serviceId}`, options);
};

export const getDeleteServiceApiUtilitiesServicesServiceIdDeleteMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteServiceApiUtilitiesServicesServiceIdDelete>
      >,
      TError,
      { serviceId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteServiceApiUtilitiesServicesServiceIdDelete>
    >,
    TError,
    { serviceId: number },
    TContext
  > => {
    const mutationKey = ["deleteServiceApiUtilitiesServicesServiceIdDelete"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteServiceApiUtilitiesServicesServiceIdDelete>
      >,
      { serviceId: number }
    > = (props) => {
      const { serviceId } = props ?? {};

      return deleteServiceApiUtilitiesServicesServiceIdDelete(
        serviceId,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteServiceApiUtilitiesServicesServiceIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteServiceApiUtilitiesServicesServiceIdDelete>>
  >;

export type DeleteServiceApiUtilitiesServicesServiceIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Service
 */
export const useDeleteServiceApiUtilitiesServicesServiceIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteServiceApiUtilitiesServicesServiceIdDelete>
    >,
    TError,
    { serviceId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteServiceApiUtilitiesServicesServiceIdDelete>>,
  TError,
  { serviceId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteServiceApiUtilitiesServicesServiceIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ–∏ –¥–ª—è –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö —Å–ª—É–∂–±
 * @summary Get Tariffs
 */
export const getTariffsApiUtilitiesTariffsGet = (
  params?: MaybeRef<GetTariffsApiUtilitiesTariffsGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  params = unref(params);

  return axios.get(`/api/utilities/tariffs`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetTariffsApiUtilitiesTariffsGetQueryKey = (
  params?: MaybeRef<GetTariffsApiUtilitiesTariffsGetParams>
) => {
  return ["api", "utilities", "tariffs", ...(params ? [params] : [])] as const;
};

export const getGetTariffsApiUtilitiesTariffsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getTariffsApiUtilitiesTariffsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<GetTariffsApiUtilitiesTariffsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTariffsApiUtilitiesTariffsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTariffsApiUtilitiesTariffsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTariffsApiUtilitiesTariffsGet>>
  > = ({ signal }) =>
    getTariffsApiUtilitiesTariffsGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTariffsApiUtilitiesTariffsGet>>,
    TError,
    TData
  >;
};

export type GetTariffsApiUtilitiesTariffsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTariffsApiUtilitiesTariffsGet>>
>;
export type GetTariffsApiUtilitiesTariffsGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Tariffs
 */

export function useGetTariffsApiUtilitiesTariffsGet<
  TData = Awaited<ReturnType<typeof getTariffsApiUtilitiesTariffsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<GetTariffsApiUtilitiesTariffsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTariffsApiUtilitiesTariffsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTariffsApiUtilitiesTariffsGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ
 * @summary Create Tariff
 */
export const createTariffApiUtilitiesTariffsPost = (
  utilityTariffCreate: MaybeRef<UtilityTariffCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UtilityTariffResponse>> => {
  utilityTariffCreate = unref(utilityTariffCreate);

  return axios.post(`/api/utilities/tariffs`, utilityTariffCreate, options);
};

export const getCreateTariffApiUtilitiesTariffsPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTariffApiUtilitiesTariffsPost>>,
    TError,
    { data: UtilityTariffCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTariffApiUtilitiesTariffsPost>>,
  TError,
  { data: UtilityTariffCreate },
  TContext
> => {
  const mutationKey = ["createTariffApiUtilitiesTariffsPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTariffApiUtilitiesTariffsPost>>,
    { data: UtilityTariffCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createTariffApiUtilitiesTariffsPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTariffApiUtilitiesTariffsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTariffApiUtilitiesTariffsPost>>
>;
export type CreateTariffApiUtilitiesTariffsPostMutationBody =
  UtilityTariffCreate;
export type CreateTariffApiUtilitiesTariffsPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Create Tariff
 */
export const useCreateTariffApiUtilitiesTariffsPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTariffApiUtilitiesTariffsPost>>,
    TError,
    { data: UtilityTariffCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createTariffApiUtilitiesTariffsPost>>,
  TError,
  { data: UtilityTariffCreate },
  TContext
> => {
  const mutationOptions =
    getCreateTariffApiUtilitiesTariffsPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ ID
 * @summary Get Tariff
 */
export const getTariffApiUtilitiesTariffsTariffIdGet = (
  tariffId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  tariffId = unref(tariffId);

  return axios.get(`/api/utilities/tariffs/${tariffId}`, options);
};

export const getGetTariffApiUtilitiesTariffsTariffIdGetQueryKey = (
  tariffId: MaybeRef<number>
) => {
  return ["api", "utilities", "tariffs", tariffId] as const;
};

export const getGetTariffApiUtilitiesTariffsTariffIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getTariffApiUtilitiesTariffsTariffIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  tariffId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTariffApiUtilitiesTariffsTariffIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTariffApiUtilitiesTariffsTariffIdGetQueryKey(tariffId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTariffApiUtilitiesTariffsTariffIdGet>>
  > = ({ signal }) =>
    getTariffApiUtilitiesTariffsTariffIdGet(tariffId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(tariffId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTariffApiUtilitiesTariffsTariffIdGet>>,
    TError,
    TData
  >;
};

export type GetTariffApiUtilitiesTariffsTariffIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTariffApiUtilitiesTariffsTariffIdGet>>
>;
export type GetTariffApiUtilitiesTariffsTariffIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Tariff
 */

export function useGetTariffApiUtilitiesTariffsTariffIdGet<
  TData = Awaited<ReturnType<typeof getTariffApiUtilitiesTariffsTariffIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  tariffId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTariffApiUtilitiesTariffsTariffIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTariffApiUtilitiesTariffsTariffIdGetQueryOptions(
    tariffId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û–Ω–æ–≤–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ
 * @summary Update Tariff
 */
export const updateTariffApiUtilitiesTariffsTariffIdPatch = (
  tariffId: MaybeRef<number>,
  utilityTariffUpdate: MaybeRef<UtilityTariffUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UtilityTariffResponse>> => {
  tariffId = unref(tariffId);
  utilityTariffUpdate = unref(utilityTariffUpdate);

  return axios.patch(
    `/api/utilities/tariffs/${tariffId}`,
    utilityTariffUpdate,
    options
  );
};

export const getUpdateTariffApiUtilitiesTariffsTariffIdPatchMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTariffApiUtilitiesTariffsTariffIdPatch>>,
    TError,
    { tariffId: number; data: UtilityTariffUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTariffApiUtilitiesTariffsTariffIdPatch>>,
  TError,
  { tariffId: number; data: UtilityTariffUpdate },
  TContext
> => {
  const mutationKey = ["updateTariffApiUtilitiesTariffsTariffIdPatch"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTariffApiUtilitiesTariffsTariffIdPatch>>,
    { tariffId: number; data: UtilityTariffUpdate }
  > = (props) => {
    const { tariffId, data } = props ?? {};

    return updateTariffApiUtilitiesTariffsTariffIdPatch(
      tariffId,
      data,
      axiosOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTariffApiUtilitiesTariffsTariffIdPatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateTariffApiUtilitiesTariffsTariffIdPatch>>
  >;
export type UpdateTariffApiUtilitiesTariffsTariffIdPatchMutationBody =
  UtilityTariffUpdate;
export type UpdateTariffApiUtilitiesTariffsTariffIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Update Tariff
 */
export const useUpdateTariffApiUtilitiesTariffsTariffIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTariffApiUtilitiesTariffsTariffIdPatch>>,
    TError,
    { tariffId: number; data: UtilityTariffUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateTariffApiUtilitiesTariffsTariffIdPatch>>,
  TError,
  { tariffId: number; data: UtilityTariffUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateTariffApiUtilitiesTariffsTariffIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ
 * @summary Delete Tariff
 */
export const deleteTariffApiUtilitiesTariffsTariffIdDelete = (
  tariffId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  tariffId = unref(tariffId);

  return axios.delete(`/api/utilities/tariffs/${tariffId}`, options);
};

export const getDeleteTariffApiUtilitiesTariffsTariffIdDeleteMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTariffApiUtilitiesTariffsTariffIdDelete>>,
    TError,
    { tariffId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTariffApiUtilitiesTariffsTariffIdDelete>>,
  TError,
  { tariffId: number },
  TContext
> => {
  const mutationKey = ["deleteTariffApiUtilitiesTariffsTariffIdDelete"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTariffApiUtilitiesTariffsTariffIdDelete>>,
    { tariffId: number }
  > = (props) => {
    const { tariffId } = props ?? {};

    return deleteTariffApiUtilitiesTariffsTariffIdDelete(
      tariffId,
      axiosOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTariffApiUtilitiesTariffsTariffIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteTariffApiUtilitiesTariffsTariffIdDelete>>
  >;

export type DeleteTariffApiUtilitiesTariffsTariffIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Tariff
 */
export const useDeleteTariffApiUtilitiesTariffsTariffIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTariffApiUtilitiesTariffsTariffIdDelete>>,
    TError,
    { tariffId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteTariffApiUtilitiesTariffsTariffIdDelete>>,
  TError,
  { tariffId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteTariffApiUtilitiesTariffsTariffIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö —Å–ª—É–∂–±
 * @summary Get Readings
 */
export const getReadingsApiUtilitiesReadingsGet = (
  params?: MaybeRef<GetReadingsApiUtilitiesReadingsGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  params = unref(params);

  return axios.get(`/api/utilities/readings`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetReadingsApiUtilitiesReadingsGetQueryKey = (
  params?: MaybeRef<GetReadingsApiUtilitiesReadingsGetParams>
) => {
  return ["api", "utilities", "readings", ...(params ? [params] : [])] as const;
};

export const getGetReadingsApiUtilitiesReadingsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getReadingsApiUtilitiesReadingsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<GetReadingsApiUtilitiesReadingsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReadingsApiUtilitiesReadingsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetReadingsApiUtilitiesReadingsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReadingsApiUtilitiesReadingsGet>>
  > = ({ signal }) =>
    getReadingsApiUtilitiesReadingsGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getReadingsApiUtilitiesReadingsGet>>,
    TError,
    TData
  >;
};

export type GetReadingsApiUtilitiesReadingsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReadingsApiUtilitiesReadingsGet>>
>;
export type GetReadingsApiUtilitiesReadingsGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Readings
 */

export function useGetReadingsApiUtilitiesReadingsGet<
  TData = Awaited<ReturnType<typeof getReadingsApiUtilitiesReadingsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<GetReadingsApiUtilitiesReadingsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReadingsApiUtilitiesReadingsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReadingsApiUtilitiesReadingsGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫
 * @summary Create Reading
 */
export const createReadingApiUtilitiesReadingsPost = (
  utilityReadingCreate: MaybeRef<UtilityReadingCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  utilityReadingCreate = unref(utilityReadingCreate);

  return axios.post(`/api/utilities/readings`, utilityReadingCreate, options);
};

export const getCreateReadingApiUtilitiesReadingsPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createReadingApiUtilitiesReadingsPost>>,
    TError,
    { data: UtilityReadingCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createReadingApiUtilitiesReadingsPost>>,
  TError,
  { data: UtilityReadingCreate },
  TContext
> => {
  const mutationKey = ["createReadingApiUtilitiesReadingsPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createReadingApiUtilitiesReadingsPost>>,
    { data: UtilityReadingCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createReadingApiUtilitiesReadingsPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateReadingApiUtilitiesReadingsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createReadingApiUtilitiesReadingsPost>>
>;
export type CreateReadingApiUtilitiesReadingsPostMutationBody =
  UtilityReadingCreate;
export type CreateReadingApiUtilitiesReadingsPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Create Reading
 */
export const useCreateReadingApiUtilitiesReadingsPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createReadingApiUtilitiesReadingsPost>>,
    TError,
    { data: UtilityReadingCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createReadingApiUtilitiesReadingsPost>>,
  TError,
  { data: UtilityReadingCreate },
  TContext
> => {
  const mutationOptions =
    getCreateReadingApiUtilitiesReadingsPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫ –∑–∞ ID
 * @summary Get Reading
 */
export const getReadingApiUtilitiesReadingsReadingIdGet = (
  readingId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  readingId = unref(readingId);

  return axios.get(`/api/utilities/readings/${readingId}`, options);
};

export const getGetReadingApiUtilitiesReadingsReadingIdGetQueryKey = (
  readingId: MaybeRef<number>
) => {
  return ["api", "utilities", "readings", readingId] as const;
};

export const getGetReadingApiUtilitiesReadingsReadingIdGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getReadingApiUtilitiesReadingsReadingIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  readingId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReadingApiUtilitiesReadingsReadingIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    getGetReadingApiUtilitiesReadingsReadingIdGetQueryKey(readingId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReadingApiUtilitiesReadingsReadingIdGet>>
  > = ({ signal }) =>
    getReadingApiUtilitiesReadingsReadingIdGet(readingId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(readingId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReadingApiUtilitiesReadingsReadingIdGet>>,
    TError,
    TData
  >;
};

export type GetReadingApiUtilitiesReadingsReadingIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReadingApiUtilitiesReadingsReadingIdGet>>
>;
export type GetReadingApiUtilitiesReadingsReadingIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Reading
 */

export function useGetReadingApiUtilitiesReadingsReadingIdGet<
  TData = Awaited<
    ReturnType<typeof getReadingApiUtilitiesReadingsReadingIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  readingId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReadingApiUtilitiesReadingsReadingIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetReadingApiUtilitiesReadingsReadingIdGetQueryOptions(
      readingId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫
 * @summary Update Reading
 */
export const updateReadingApiUtilitiesReadingsReadingIdPatch = (
  readingId: MaybeRef<number>,
  utilityReadingUpdate: MaybeRef<UtilityReadingUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  readingId = unref(readingId);
  utilityReadingUpdate = unref(utilityReadingUpdate);

  return axios.patch(
    `/api/utilities/readings/${readingId}`,
    utilityReadingUpdate,
    options
  );
};

export const getUpdateReadingApiUtilitiesReadingsReadingIdPatchMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof updateReadingApiUtilitiesReadingsReadingIdPatch>
      >,
      TError,
      { readingId: number; data: UtilityReadingUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof updateReadingApiUtilitiesReadingsReadingIdPatch>>,
    TError,
    { readingId: number; data: UtilityReadingUpdate },
    TContext
  > => {
    const mutationKey = ["updateReadingApiUtilitiesReadingsReadingIdPatch"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof updateReadingApiUtilitiesReadingsReadingIdPatch>
      >,
      { readingId: number; data: UtilityReadingUpdate }
    > = (props) => {
      const { readingId, data } = props ?? {};

      return updateReadingApiUtilitiesReadingsReadingIdPatch(
        readingId,
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateReadingApiUtilitiesReadingsReadingIdPatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateReadingApiUtilitiesReadingsReadingIdPatch>>
  >;
export type UpdateReadingApiUtilitiesReadingsReadingIdPatchMutationBody =
  UtilityReadingUpdate;
export type UpdateReadingApiUtilitiesReadingsReadingIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Update Reading
 */
export const useUpdateReadingApiUtilitiesReadingsReadingIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateReadingApiUtilitiesReadingsReadingIdPatch>>,
    TError,
    { readingId: number; data: UtilityReadingUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateReadingApiUtilitiesReadingsReadingIdPatch>>,
  TError,
  { readingId: number; data: UtilityReadingUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateReadingApiUtilitiesReadingsReadingIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫
 * @summary Delete Reading
 */
export const deleteReadingApiUtilitiesReadingsReadingIdDelete = (
  readingId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  readingId = unref(readingId);

  return axios.delete(`/api/utilities/readings/${readingId}`, options);
};

export const getDeleteReadingApiUtilitiesReadingsReadingIdDeleteMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteReadingApiUtilitiesReadingsReadingIdDelete>
      >,
      TError,
      { readingId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteReadingApiUtilitiesReadingsReadingIdDelete>
    >,
    TError,
    { readingId: number },
    TContext
  > => {
    const mutationKey = ["deleteReadingApiUtilitiesReadingsReadingIdDelete"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteReadingApiUtilitiesReadingsReadingIdDelete>
      >,
      { readingId: number }
    > = (props) => {
      const { readingId } = props ?? {};

      return deleteReadingApiUtilitiesReadingsReadingIdDelete(
        readingId,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteReadingApiUtilitiesReadingsReadingIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteReadingApiUtilitiesReadingsReadingIdDelete>>
  >;

export type DeleteReadingApiUtilitiesReadingsReadingIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Reading
 */
export const useDeleteReadingApiUtilitiesReadingsReadingIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteReadingApiUtilitiesReadingsReadingIdDelete>
    >,
    TError,
    { readingId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteReadingApiUtilitiesReadingsReadingIdDelete>>,
  TError,
  { readingId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteReadingApiUtilitiesReadingsReadingIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏ –¥–ª—è —Å–ª—É–∂–±–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
 * @summary Get Grouped Tariffs
 */
export const getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet = (
  serviceId: MaybeRef<number>,
  params: MaybeRef<GetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  serviceId = unref(serviceId);
  params = unref(params);

  return axios.get(`/api/utilities/tariffs/grouped/${serviceId}`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetQueryKey =
  (
    serviceId: MaybeRef<number>,
    params: MaybeRef<GetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetParams>
  ) => {
    return [
      "api",
      "utilities",
      "tariffs",
      "grouped",
      serviceId,
      ...(params ? [params] : []),
    ] as const;
  };

export const getGetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet>
    >,
    TError = AxiosError<HTTPValidationError>
  >(
    serviceId: MaybeRef<number>,
    params: MaybeRef<GetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetParams>,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet
            >
          >,
          TError,
          TData
        >
      >;
      axios?: AxiosRequestConfig;
    }
  ) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
      getGetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetQueryKey(
        serviceId,
        params
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet
        >
      >
    > = ({ signal }) =>
      getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet(
        serviceId,
        params,
        { signal, ...axiosOptions }
      );

    return {
      queryKey,
      queryFn,
      enabled: computed(() => !!unref(serviceId)),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet
        >
      >,
      TError,
      TData
    >;
  };

export type GetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet>
    >
  >;
export type GetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Grouped Tariffs
 */

export function useGetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet<
  TData = Awaited<
    ReturnType<typeof getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  serviceId: MaybeRef<number>,
  params: MaybeRef<GetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGet
          >
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetGroupedTariffsApiUtilitiesTariffsGroupedServiceIdGetQueryOptions(
      serviceId,
      params,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ (–¥–ª—è –µ–ª–µ–∫—Ç—Ä–∏–∫–∏ –¥–µ–Ω—å/–Ω—ñ—á)
 * @summary Create Batch Readings
 */
export const createBatchReadingsApiUtilitiesReadingsBatchPost = (
  createBatchReadingsApiUtilitiesReadingsBatchPostBody: MaybeRef<CreateBatchReadingsApiUtilitiesReadingsBatchPostBody>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  createBatchReadingsApiUtilitiesReadingsBatchPostBody = unref(
    createBatchReadingsApiUtilitiesReadingsBatchPostBody
  );

  return axios.post(
    `/api/utilities/readings/batch`,
    createBatchReadingsApiUtilitiesReadingsBatchPostBody,
    options
  );
};

export const getCreateBatchReadingsApiUtilitiesReadingsBatchPostMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof createBatchReadingsApiUtilitiesReadingsBatchPost>
      >,
      TError,
      { data: CreateBatchReadingsApiUtilitiesReadingsBatchPostBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof createBatchReadingsApiUtilitiesReadingsBatchPost>
    >,
    TError,
    { data: CreateBatchReadingsApiUtilitiesReadingsBatchPostBody },
    TContext
  > => {
    const mutationKey = ["createBatchReadingsApiUtilitiesReadingsBatchPost"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof createBatchReadingsApiUtilitiesReadingsBatchPost>
      >,
      { data: CreateBatchReadingsApiUtilitiesReadingsBatchPostBody }
    > = (props) => {
      const { data } = props ?? {};

      return createBatchReadingsApiUtilitiesReadingsBatchPost(
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CreateBatchReadingsApiUtilitiesReadingsBatchPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof createBatchReadingsApiUtilitiesReadingsBatchPost>>
  >;
export type CreateBatchReadingsApiUtilitiesReadingsBatchPostMutationBody =
  CreateBatchReadingsApiUtilitiesReadingsBatchPostBody;
export type CreateBatchReadingsApiUtilitiesReadingsBatchPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Create Batch Readings
 */
export const useCreateBatchReadingsApiUtilitiesReadingsBatchPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof createBatchReadingsApiUtilitiesReadingsBatchPost>
    >,
    TError,
    { data: CreateBatchReadingsApiUtilitiesReadingsBatchPostBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createBatchReadingsApiUtilitiesReadingsBatchPost>>,
  TError,
  { data: CreateBatchReadingsApiUtilitiesReadingsBatchPostBody },
  TContext
> => {
  const mutationOptions =
    getCreateBatchReadingsApiUtilitiesReadingsBatchPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑ –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞–º–∏
 * @summary Get Detailed Readings
 */
export const getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet = (
  serviceId: MaybeRef<number>,
  params: MaybeRef<GetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  serviceId = unref(serviceId);
  params = unref(params);

  return axios.get(`/api/utilities/readings/detailed/${serviceId}`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetQueryKey =
  (
    serviceId: MaybeRef<number>,
    params: MaybeRef<GetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetParams>
  ) => {
    return [
      "api",
      "utilities",
      "readings",
      "detailed",
      serviceId,
      ...(params ? [params] : []),
    ] as const;
  };

export const getGetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet
      >
    >,
    TError = AxiosError<HTTPValidationError>
  >(
    serviceId: MaybeRef<number>,
    params: MaybeRef<GetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetParams>,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet
            >
          >,
          TError,
          TData
        >
      >;
      axios?: AxiosRequestConfig;
    }
  ) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
      getGetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetQueryKey(
        serviceId,
        params
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet
        >
      >
    > = ({ signal }) =>
      getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet(
        serviceId,
        params,
        { signal, ...axiosOptions }
      );

    return {
      queryKey,
      queryFn,
      enabled: computed(() => !!unref(serviceId)),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet
        >
      >,
      TError,
      TData
    >;
  };

export type GetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet
      >
    >
  >;
export type GetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Detailed Readings
 */

export function useGetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet<
  TData = Awaited<
    ReturnType<
      typeof getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet
    >
  >,
  TError = AxiosError<HTTPValidationError>
>(
  serviceId: MaybeRef<number>,
  params: MaybeRef<GetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGet
          >
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetDetailedReadingsApiUtilitiesReadingsDetailedServiceIdGetQueryOptions(
      serviceId,
      params,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ –∑ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∏
 * @summary Get Latest Period With Readings Endpoint
 */
export const getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet =
  (
    addressId: MaybeRef<number>,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<LatestPeriodResponse>> => {
    addressId = unref(addressId);

    return axios.get(
      `/api/utilities/readings/latest-period/${addressId}`,
      options
    );
  };

export const getGetLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGetQueryKey =
  (addressId: MaybeRef<number>) => {
    return [
      "api",
      "utilities",
      "readings",
      "latest-period",
      addressId,
    ] as const;
  };

export const getGetLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet
      >
    >,
    TError = AxiosError<HTTPValidationError>
  >(
    addressId: MaybeRef<number>,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet
            >
          >,
          TError,
          TData
        >
      >;
      axios?: AxiosRequestConfig;
    }
  ) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
      getGetLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGetQueryKey(
        addressId
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet
        >
      >
    > = ({ signal }) =>
      getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet(
        addressId,
        { signal, ...axiosOptions }
      );

    return {
      queryKey,
      queryFn,
      enabled: computed(() => !!unref(addressId)),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet
        >
      >,
      TError,
      TData
    >;
  };

export type GetLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet
      >
    >
  >;
export type GetLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Latest Period With Readings Endpoint
 */

export function useGetLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet<
  TData = Awaited<
    ReturnType<
      typeof getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet
    >
  >,
  TError = AxiosError<HTTPValidationError>
>(
  addressId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGet
          >
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetLatestPeriodWithReadingsEndpointApiUtilitiesReadingsLatestPeriodAddressIdGetQueryOptions(
      addressId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥
 * @summary Get Grouped Readings Endpoint
 */
export const getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet = (
  params: MaybeRef<GetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GroupedReadingsResponse>> => {
  params = unref(params);

  return axios.get(`/api/utilities/grouped-readings`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetQueryKey =
  (
    params: MaybeRef<GetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetParams>
  ) => {
    return [
      "api",
      "utilities",
      "grouped-readings",
      ...(params ? [params] : []),
    ] as const;
  };

export const getGetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet
      >
    >,
    TError = AxiosError<HTTPValidationError>
  >(
    params: MaybeRef<GetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetParams>,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet
            >
          >,
          TError,
          TData
        >
      >;
      axios?: AxiosRequestConfig;
    }
  ) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
      getGetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetQueryKey(
        params
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet
        >
      >
    > = ({ signal }) =>
      getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet(params, {
        signal,
        ...axiosOptions,
      });

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet
        >
      >,
      TError,
      TData
    >;
  };

export type GetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet
      >
    >
  >;
export type GetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Grouped Readings Endpoint
 */

export function useGetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet<
  TData = Awaited<
    ReturnType<typeof getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  params: MaybeRef<GetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getGroupedReadingsEndpointApiUtilitiesGroupedReadingsGet
          >
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetGroupedReadingsEndpointApiUtilitiesGroupedReadingsGetQueryOptions(
      params,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
