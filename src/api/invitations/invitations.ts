/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  AcceptInvitationApiInvitationsInvitationCodeAcceptPostBody,
  HTTPValidationError,
  IgnoreInvitationApiInvitationsInvitationIdIgnorePostBody,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
 * @summary Check Invitation
 */
export const checkInvitationApiInvitationsInvitationCodeGet = (
  invitationCode: MaybeRef<string>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  invitationCode = unref(invitationCode);

  return axios.default.get(`/api/invitations/${invitationCode}`, options);
};

export const getCheckInvitationApiInvitationsInvitationCodeGetQueryKey = (
  invitationCode: MaybeRef<string>
) => {
  return ["api", "invitations", invitationCode] as const;
};

export const getCheckInvitationApiInvitationsInvitationCodeGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof checkInvitationApiInvitationsInvitationCodeGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  invitationCode: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof checkInvitationApiInvitationsInvitationCodeGet>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    getCheckInvitationApiInvitationsInvitationCodeGetQueryKey(invitationCode);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkInvitationApiInvitationsInvitationCodeGet>>
  > = ({ signal }) =>
    checkInvitationApiInvitationsInvitationCodeGet(invitationCode, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(invitationCode)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof checkInvitationApiInvitationsInvitationCodeGet>>,
    TError,
    TData
  >;
};

export type CheckInvitationApiInvitationsInvitationCodeGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof checkInvitationApiInvitationsInvitationCodeGet>>
  >;
export type CheckInvitationApiInvitationsInvitationCodeGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Check Invitation
 */

export function useCheckInvitationApiInvitationsInvitationCodeGet<
  TData = Awaited<
    ReturnType<typeof checkInvitationApiInvitationsInvitationCodeGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  invitationCode: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof checkInvitationApiInvitationsInvitationCodeGet>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getCheckInvitationApiInvitationsInvitationCodeGetQueryOptions(
      invitationCode,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –ü—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
 * @summary Accept Invitation
 */
export const acceptInvitationApiInvitationsInvitationCodeAcceptPost = (
  invitationCode: MaybeRef<string>,
  acceptInvitationApiInvitationsInvitationCodeAcceptPostBody: MaybeRef<AcceptInvitationApiInvitationsInvitationCodeAcceptPostBody>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  invitationCode = unref(invitationCode);
  acceptInvitationApiInvitationsInvitationCodeAcceptPostBody = unref(
    acceptInvitationApiInvitationsInvitationCodeAcceptPostBody
  );

  return axios.default.post(
    `/api/invitations/${invitationCode}/accept`,
    acceptInvitationApiInvitationsInvitationCodeAcceptPostBody,
    options
  );
};

export const getAcceptInvitationApiInvitationsInvitationCodeAcceptPostMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof acceptInvitationApiInvitationsInvitationCodeAcceptPost
        >
      >,
      TError,
      {
        invitationCode: string;
        data: AcceptInvitationApiInvitationsInvitationCodeAcceptPostBody;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof acceptInvitationApiInvitationsInvitationCodeAcceptPost>
    >,
    TError,
    {
      invitationCode: string;
      data: AcceptInvitationApiInvitationsInvitationCodeAcceptPostBody;
    },
    TContext
  > => {
    const mutationKey = [
      "acceptInvitationApiInvitationsInvitationCodeAcceptPost",
    ];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof acceptInvitationApiInvitationsInvitationCodeAcceptPost
        >
      >,
      {
        invitationCode: string;
        data: AcceptInvitationApiInvitationsInvitationCodeAcceptPostBody;
      }
    > = (props) => {
      const { invitationCode, data } = props ?? {};

      return acceptInvitationApiInvitationsInvitationCodeAcceptPost(
        invitationCode,
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type AcceptInvitationApiInvitationsInvitationCodeAcceptPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof acceptInvitationApiInvitationsInvitationCodeAcceptPost>
    >
  >;
export type AcceptInvitationApiInvitationsInvitationCodeAcceptPostMutationBody =
  AcceptInvitationApiInvitationsInvitationCodeAcceptPostBody;
export type AcceptInvitationApiInvitationsInvitationCodeAcceptPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Accept Invitation
 */
export const useAcceptInvitationApiInvitationsInvitationCodeAcceptPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof acceptInvitationApiInvitationsInvitationCodeAcceptPost>
    >,
    TError,
    {
      invitationCode: string;
      data: AcceptInvitationApiInvitationsInvitationCodeAcceptPostBody;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<
    ReturnType<typeof acceptInvitationApiInvitationsInvitationCodeAcceptPost>
  >,
  TError,
  {
    invitationCode: string;
    data: AcceptInvitationApiInvitationsInvitationCodeAcceptPostBody;
  },
  TContext
> => {
  const mutationOptions =
    getAcceptInvitationApiInvitationsInvitationCodeAcceptPostMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
 * @summary Get Invitation
 */
export const getInvitationApiInvitationsInvitationIdGet = (
  invitationId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  invitationId = unref(invitationId);

  return axios.default.get(`/api/invitations/${invitationId}`, options);
};

export const getGetInvitationApiInvitationsInvitationIdGetQueryKey = (
  invitationId: MaybeRef<number>
) => {
  return ["api", "invitations", invitationId] as const;
};

export const getGetInvitationApiInvitationsInvitationIdGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getInvitationApiInvitationsInvitationIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  invitationId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInvitationApiInvitationsInvitationIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    getGetInvitationApiInvitationsInvitationIdGetQueryKey(invitationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getInvitationApiInvitationsInvitationIdGet>>
  > = ({ signal }) =>
    getInvitationApiInvitationsInvitationIdGet(invitationId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(invitationId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getInvitationApiInvitationsInvitationIdGet>>,
    TError,
    TData
  >;
};

export type GetInvitationApiInvitationsInvitationIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInvitationApiInvitationsInvitationIdGet>>
>;
export type GetInvitationApiInvitationsInvitationIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Invitation
 */

export function useGetInvitationApiInvitationsInvitationIdGet<
  TData = Awaited<
    ReturnType<typeof getInvitationApiInvitationsInvitationIdGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  invitationId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInvitationApiInvitationsInvitationIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetInvitationApiInvitationsInvitationIdGetQueryOptions(
      invitationId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
 * @summary Delete Invitation
 */
export const deleteInvitationApiInvitationsInvitationIdDelete = (
  invitationId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  invitationId = unref(invitationId);

  return axios.default.delete(`/api/invitations/${invitationId}`, options);
};

export const getDeleteInvitationApiInvitationsInvitationIdDeleteMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteInvitationApiInvitationsInvitationIdDelete>
      >,
      TError,
      { invitationId: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteInvitationApiInvitationsInvitationIdDelete>
    >,
    TError,
    { invitationId: number },
    TContext
  > => {
    const mutationKey = ["deleteInvitationApiInvitationsInvitationIdDelete"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteInvitationApiInvitationsInvitationIdDelete>
      >,
      { invitationId: number }
    > = (props) => {
      const { invitationId } = props ?? {};

      return deleteInvitationApiInvitationsInvitationIdDelete(
        invitationId,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteInvitationApiInvitationsInvitationIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteInvitationApiInvitationsInvitationIdDelete>>
  >;

export type DeleteInvitationApiInvitationsInvitationIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Invitation
 */
export const useDeleteInvitationApiInvitationsInvitationIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteInvitationApiInvitationsInvitationIdDelete>
    >,
    TError,
    { invitationId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteInvitationApiInvitationsInvitationIdDelete>>,
  TError,
  { invitationId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteInvitationApiInvitationsInvitationIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–ø—Ä–æ—à–µ–Ω—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @summary Check User Invitations
 */
export const checkUserInvitationsApiUsersInvitationsGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.default.get(`/api/users/invitations`, options);
};

export const getCheckUserInvitationsApiUsersInvitationsGetQueryKey = () => {
  return ["api", "users", "invitations"] as const;
};

export const getCheckUserInvitationsApiUsersInvitationsGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof checkUserInvitationsApiUsersInvitationsGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof checkUserInvitationsApiUsersInvitationsGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getCheckUserInvitationsApiUsersInvitationsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkUserInvitationsApiUsersInvitationsGet>>
  > = ({ signal }) =>
    checkUserInvitationsApiUsersInvitationsGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof checkUserInvitationsApiUsersInvitationsGet>>,
    TError,
    TData
  >;
};

export type CheckUserInvitationsApiUsersInvitationsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkUserInvitationsApiUsersInvitationsGet>>
>;
export type CheckUserInvitationsApiUsersInvitationsGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Check User Invitations
 */

export function useCheckUserInvitationsApiUsersInvitationsGet<
  TData = Awaited<
    ReturnType<typeof checkUserInvitationsApiUsersInvitationsGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof checkUserInvitationsApiUsersInvitationsGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getCheckUserInvitationsApiUsersInvitationsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
 * @summary Ignore Invitation
 */
export const ignoreInvitationApiInvitationsInvitationIdIgnorePost = (
  invitationId: MaybeRef<number>,
  ignoreInvitationApiInvitationsInvitationIdIgnorePostBody: MaybeRef<IgnoreInvitationApiInvitationsInvitationIdIgnorePostBody>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  invitationId = unref(invitationId);
  ignoreInvitationApiInvitationsInvitationIdIgnorePostBody = unref(
    ignoreInvitationApiInvitationsInvitationIdIgnorePostBody
  );

  return axios.default.post(
    `/api/invitations/${invitationId}/ignore`,
    ignoreInvitationApiInvitationsInvitationIdIgnorePostBody,
    options
  );
};

export const getIgnoreInvitationApiInvitationsInvitationIdIgnorePostMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof ignoreInvitationApiInvitationsInvitationIdIgnorePost>
      >,
      TError,
      {
        invitationId: number;
        data: IgnoreInvitationApiInvitationsInvitationIdIgnorePostBody;
      },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof ignoreInvitationApiInvitationsInvitationIdIgnorePost>
    >,
    TError,
    {
      invitationId: number;
      data: IgnoreInvitationApiInvitationsInvitationIdIgnorePostBody;
    },
    TContext
  > => {
    const mutationKey = [
      "ignoreInvitationApiInvitationsInvitationIdIgnorePost",
    ];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof ignoreInvitationApiInvitationsInvitationIdIgnorePost>
      >,
      {
        invitationId: number;
        data: IgnoreInvitationApiInvitationsInvitationIdIgnorePostBody;
      }
    > = (props) => {
      const { invitationId, data } = props ?? {};

      return ignoreInvitationApiInvitationsInvitationIdIgnorePost(
        invitationId,
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type IgnoreInvitationApiInvitationsInvitationIdIgnorePostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof ignoreInvitationApiInvitationsInvitationIdIgnorePost>
    >
  >;
export type IgnoreInvitationApiInvitationsInvitationIdIgnorePostMutationBody =
  IgnoreInvitationApiInvitationsInvitationIdIgnorePostBody;
export type IgnoreInvitationApiInvitationsInvitationIdIgnorePostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Ignore Invitation
 */
export const useIgnoreInvitationApiInvitationsInvitationIdIgnorePost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof ignoreInvitationApiInvitationsInvitationIdIgnorePost>
    >,
    TError,
    {
      invitationId: number;
      data: IgnoreInvitationApiInvitationsInvitationIdIgnorePostBody;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<
    ReturnType<typeof ignoreInvitationApiInvitationsInvitationIdIgnorePost>
  >,
  TError,
  {
    invitationId: number;
    data: IgnoreInvitationApiInvitationsInvitationIdIgnorePostBody;
  },
  TContext
> => {
  const mutationOptions =
    getIgnoreInvitationApiInvitationsInvitationIdIgnorePostMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
