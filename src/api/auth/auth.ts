/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  HTTPValidationError,
  LoginModel,
  UserCreate,
  UserUpdate,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞
 * @summary User Login
 */
export const userLoginApiAuthSigninPost = (
  loginModel: MaybeRef<LoginModel>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  loginModel = unref(loginModel);

  return axios.default.post(`/api/auth/signin`, loginModel, options);
};

export const getUserLoginApiAuthSigninPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userLoginApiAuthSigninPost>>,
    TError,
    { data: LoginModel },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userLoginApiAuthSigninPost>>,
  TError,
  { data: LoginModel },
  TContext
> => {
  const mutationKey = ["userLoginApiAuthSigninPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userLoginApiAuthSigninPost>>,
    { data: LoginModel }
  > = (props) => {
    const { data } = props ?? {};

    return userLoginApiAuthSigninPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserLoginApiAuthSigninPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof userLoginApiAuthSigninPost>>
>;
export type UserLoginApiAuthSigninPostMutationBody = LoginModel;
export type UserLoginApiAuthSigninPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary User Login
 */
export const useUserLoginApiAuthSigninPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userLoginApiAuthSigninPost>>,
    TError,
    { data: LoginModel },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof userLoginApiAuthSigninPost>>,
  TError,
  { data: LoginModel },
  TContext
> => {
  const mutationOptions = getUserLoginApiAuthSigninPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @summary Create User
 */
export const createUserApiAuthSignupPost = (
  userCreate: MaybeRef<UserCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  userCreate = unref(userCreate);

  return axios.default.post(`/api/auth/signup`, userCreate, options);
};

export const getCreateUserApiAuthSignupPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserApiAuthSignupPost>>,
    TError,
    { data: UserCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUserApiAuthSignupPost>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const mutationKey = ["createUserApiAuthSignupPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUserApiAuthSignupPost>>,
    { data: UserCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createUserApiAuthSignupPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserApiAuthSignupPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUserApiAuthSignupPost>>
>;
export type CreateUserApiAuthSignupPostMutationBody = UserCreate;
export type CreateUserApiAuthSignupPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Create User
 */
export const useCreateUserApiAuthSignupPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserApiAuthSignupPost>>,
    TError,
    { data: UserCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createUserApiAuthSignupPost>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const mutationOptions =
    getCreateUserApiAuthSignupPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
 * @summary Get User
 */
export const getUserApiUsersUserIdGet = (
  userId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  userId = unref(userId);

  return axios.default.get(`/api/users/${userId}`, options);
};

export const getGetUserApiUsersUserIdGetQueryKey = (
  userId: MaybeRef<number>
) => {
  return ["api", "users", userId] as const;
};

export const getGetUserApiUsersUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  userId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetUserApiUsersUserIdGetQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>
  > = ({ signal }) =>
    getUserApiUsersUserIdGet(userId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(userId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>,
    TError,
    TData
  >;
};

export type GetUserApiUsersUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>
>;
export type GetUserApiUsersUserIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get User
 */

export function useGetUserApiUsersUserIdGet<
  TData = Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  userId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserApiUsersUserIdGetQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
 * @summary Delete User
 */
export const deleteUserApiUsersUserIdDelete = (
  userId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  userId = unref(userId);

  return axios.default.delete(`/api/users/${userId}`, options);
};

export const getDeleteUserApiUsersUserIdDeleteMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserApiUsersUserIdDelete>>,
    TError,
    { userId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUserApiUsersUserIdDelete>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationKey = ["deleteUserApiUsersUserIdDelete"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUserApiUsersUserIdDelete>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {};

    return deleteUserApiUsersUserIdDelete(userId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserApiUsersUserIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUserApiUsersUserIdDelete>>
>;

export type DeleteUserApiUsersUserIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete User
 */
export const useDeleteUserApiUsersUserIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserApiUsersUserIdDelete>>,
    TError,
    { userId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteUserApiUsersUserIdDelete>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteUserApiUsersUserIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @summary Edit User
 */
export const editUserApiUsersUserIdPatch = (
  userId: MaybeRef<number>,
  userUpdate: MaybeRef<UserUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  userId = unref(userId);
  userUpdate = unref(userUpdate);

  return axios.default.patch(`/api/users/${userId}`, userUpdate, options);
};

export const getEditUserApiUsersUserIdPatchMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editUserApiUsersUserIdPatch>>,
    TError,
    { userId: number; data: UserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof editUserApiUsersUserIdPatch>>,
  TError,
  { userId: number; data: UserUpdate },
  TContext
> => {
  const mutationKey = ["editUserApiUsersUserIdPatch"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editUserApiUsersUserIdPatch>>,
    { userId: number; data: UserUpdate }
  > = (props) => {
    const { userId, data } = props ?? {};

    return editUserApiUsersUserIdPatch(userId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EditUserApiUsersUserIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof editUserApiUsersUserIdPatch>>
>;
export type EditUserApiUsersUserIdPatchMutationBody = UserUpdate;
export type EditUserApiUsersUserIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Edit User
 */
export const useEditUserApiUsersUserIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editUserApiUsersUserIdPatch>>,
    TError,
    { userId: number; data: UserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof editUserApiUsersUserIdPatch>>,
  TError,
  { userId: number; data: UserUpdate },
  TContext
> => {
  const mutationOptions =
    getEditUserApiUsersUserIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * @summary Get Users
 */
export const getUsersApiUsersGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.default.get(`/api/users`, options);
};

export const getGetUsersApiUsersGetQueryKey = () => {
  return ["api", "users"] as const;
};

export const getGetUsersApiUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersApiUsersGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUsersApiUsersGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetUsersApiUsersGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersApiUsersGet>>
  > = ({ signal }) => getUsersApiUsersGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersApiUsersGet>>,
    TError,
    TData
  >;
};

export type GetUsersApiUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersApiUsersGet>>
>;
export type GetUsersApiUsersGetQueryError = AxiosError<unknown>;

/**
 * @summary Get Users
 */

export function useGetUsersApiUsersGet<
  TData = Awaited<ReturnType<typeof getUsersApiUsersGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUsersApiUsersGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersApiUsersGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
