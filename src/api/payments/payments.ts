/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  GetPaymentsApiPaymentsGetParams,
  HTTPValidationError,
  PaymentBulkDelete,
  PaymentCategoryUpdate,
  PaymentCreate,
  PaymentUpdate,
} from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
 * @summary Add Payment
 */
export const addPaymentApiPaymentsPost = (
  paymentCreate: MaybeRef<PaymentCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  paymentCreate = unref(paymentCreate);

  return axios.default.post(`/api/payments`, paymentCreate, options);
};

export const getAddPaymentApiPaymentsPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addPaymentApiPaymentsPost>>,
    TError,
    { data: PaymentCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addPaymentApiPaymentsPost>>,
  TError,
  { data: PaymentCreate },
  TContext
> => {
  const mutationKey = ["addPaymentApiPaymentsPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addPaymentApiPaymentsPost>>,
    { data: PaymentCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addPaymentApiPaymentsPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddPaymentApiPaymentsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addPaymentApiPaymentsPost>>
>;
export type AddPaymentApiPaymentsPostMutationBody = PaymentCreate;
export type AddPaymentApiPaymentsPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Add Payment
 */
export const useAddPaymentApiPaymentsPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addPaymentApiPaymentsPost>>,
    TError,
    { data: PaymentCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof addPaymentApiPaymentsPost>>,
  TError,
  { data: PaymentCreate },
  TContext
> => {
  const mutationOptions = getAddPaymentApiPaymentsPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
–Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —Ä—ñ–∫ —ñ –º—ñ—Å—è—Ü—å, –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –ø–ª–∞—Ç–µ–∂—ñ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.
–Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ q, –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ—à—É–∫.
 * @summary Get Payments
 */
export const getPaymentsApiPaymentsGet = (
  params?: MaybeRef<GetPaymentsApiPaymentsGetParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  params = unref(params);

  return axios.default.get(`/api/payments`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetPaymentsApiPaymentsGetQueryKey = (
  params?: MaybeRef<GetPaymentsApiPaymentsGetParams>
) => {
  return ["api", "payments", ...(params ? [params] : [])] as const;
};

export const getGetPaymentsApiPaymentsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPaymentsApiPaymentsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<GetPaymentsApiPaymentsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentsApiPaymentsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetPaymentsApiPaymentsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPaymentsApiPaymentsGet>>
  > = ({ signal }) =>
    getPaymentsApiPaymentsGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPaymentsApiPaymentsGet>>,
    TError,
    TData
  >;
};

export type GetPaymentsApiPaymentsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPaymentsApiPaymentsGet>>
>;
export type GetPaymentsApiPaymentsGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Payments
 */

export function useGetPaymentsApiPaymentsGet<
  TData = Awaited<ReturnType<typeof getPaymentsApiPaymentsGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: MaybeRef<GetPaymentsApiPaymentsGetParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentsApiPaymentsGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPaymentsApiPaymentsGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ –∑–∞ ID
 * @summary Get Payment
 */
export const getPaymentApiPaymentsPaymentIdGet = (
  paymentId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  paymentId = unref(paymentId);

  return axios.default.get(`/api/payments/${paymentId}`, options);
};

export const getGetPaymentApiPaymentsPaymentIdGetQueryKey = (
  paymentId: MaybeRef<number>
) => {
  return ["api", "payments", paymentId] as const;
};

export const getGetPaymentApiPaymentsPaymentIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getPaymentApiPaymentsPaymentIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  paymentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentApiPaymentsPaymentIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetPaymentApiPaymentsPaymentIdGetQueryKey(paymentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPaymentApiPaymentsPaymentIdGet>>
  > = ({ signal }) =>
    getPaymentApiPaymentsPaymentIdGet(paymentId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(paymentId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPaymentApiPaymentsPaymentIdGet>>,
    TError,
    TData
  >;
};

export type GetPaymentApiPaymentsPaymentIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPaymentApiPaymentsPaymentIdGet>>
>;
export type GetPaymentApiPaymentsPaymentIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Payment
 */

export function useGetPaymentApiPaymentsPaymentIdGet<
  TData = Awaited<ReturnType<typeof getPaymentApiPaymentsPaymentIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  paymentId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentApiPaymentsPaymentIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPaymentApiPaymentsPaymentIdGetQueryOptions(
    paymentId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –∑–∞ ID
 * @summary Del Payment
 */
export const delPaymentApiPaymentsPaymentIdDelete = (
  paymentId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  paymentId = unref(paymentId);

  return axios.default.delete(`/api/payments/${paymentId}`, options);
};

export const getDelPaymentApiPaymentsPaymentIdDeleteMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof delPaymentApiPaymentsPaymentIdDelete>>,
    TError,
    { paymentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof delPaymentApiPaymentsPaymentIdDelete>>,
  TError,
  { paymentId: number },
  TContext
> => {
  const mutationKey = ["delPaymentApiPaymentsPaymentIdDelete"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof delPaymentApiPaymentsPaymentIdDelete>>,
    { paymentId: number }
  > = (props) => {
    const { paymentId } = props ?? {};

    return delPaymentApiPaymentsPaymentIdDelete(paymentId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DelPaymentApiPaymentsPaymentIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof delPaymentApiPaymentsPaymentIdDelete>>
>;

export type DelPaymentApiPaymentsPaymentIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Del Payment
 */
export const useDelPaymentApiPaymentsPaymentIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof delPaymentApiPaymentsPaymentIdDelete>>,
    TError,
    { paymentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof delPaymentApiPaymentsPaymentIdDelete>>,
  TError,
  { paymentId: number },
  TContext
> => {
  const mutationOptions =
    getDelPaymentApiPaymentsPaymentIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂
 * @summary Upd Payment
 */
export const updPaymentApiPaymentsPaymentIdPatch = (
  paymentId: MaybeRef<number>,
  paymentUpdate: MaybeRef<PaymentUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  paymentId = unref(paymentId);
  paymentUpdate = unref(paymentUpdate);

  return axios.default.patch(
    `/api/payments/${paymentId}`,
    paymentUpdate,
    options
  );
};

export const getUpdPaymentApiPaymentsPaymentIdPatchMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updPaymentApiPaymentsPaymentIdPatch>>,
    TError,
    { paymentId: number; data: PaymentUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updPaymentApiPaymentsPaymentIdPatch>>,
  TError,
  { paymentId: number; data: PaymentUpdate },
  TContext
> => {
  const mutationKey = ["updPaymentApiPaymentsPaymentIdPatch"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updPaymentApiPaymentsPaymentIdPatch>>,
    { paymentId: number; data: PaymentUpdate }
  > = (props) => {
    const { paymentId, data } = props ?? {};

    return updPaymentApiPaymentsPaymentIdPatch(paymentId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdPaymentApiPaymentsPaymentIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updPaymentApiPaymentsPaymentIdPatch>>
>;
export type UpdPaymentApiPaymentsPaymentIdPatchMutationBody = PaymentUpdate;
export type UpdPaymentApiPaymentsPaymentIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Upd Payment
 */
export const useUpdPaymentApiPaymentsPaymentIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updPaymentApiPaymentsPaymentIdPatch>>,
    TError,
    { paymentId: number; data: PaymentUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updPaymentApiPaymentsPaymentIdPatch>>,
  TError,
  { paymentId: number; data: PaymentUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdPaymentApiPaymentsPaymentIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –ó–º—ñ–Ω—é—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Å–ø–∏—Å–∫—É –ø–ª–∞—Ç–µ–∂—ñ–≤
 * @summary Change Payments Category
 */
export const changePaymentsCategoryApiPaymentsChangeCategoryPost = (
  paymentCategoryUpdate: MaybeRef<PaymentCategoryUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  paymentCategoryUpdate = unref(paymentCategoryUpdate);

  return axios.default.post(
    `/api/payments/change-category`,
    paymentCategoryUpdate,
    options
  );
};

export const getChangePaymentsCategoryApiPaymentsChangeCategoryPostMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof changePaymentsCategoryApiPaymentsChangeCategoryPost>
      >,
      TError,
      { data: PaymentCategoryUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof changePaymentsCategoryApiPaymentsChangeCategoryPost>
    >,
    TError,
    { data: PaymentCategoryUpdate },
    TContext
  > => {
    const mutationKey = ["changePaymentsCategoryApiPaymentsChangeCategoryPost"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof changePaymentsCategoryApiPaymentsChangeCategoryPost>
      >,
      { data: PaymentCategoryUpdate }
    > = (props) => {
      const { data } = props ?? {};

      return changePaymentsCategoryApiPaymentsChangeCategoryPost(
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type ChangePaymentsCategoryApiPaymentsChangeCategoryPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof changePaymentsCategoryApiPaymentsChangeCategoryPost>
    >
  >;
export type ChangePaymentsCategoryApiPaymentsChangeCategoryPostMutationBody =
  PaymentCategoryUpdate;
export type ChangePaymentsCategoryApiPaymentsChangeCategoryPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Change Payments Category
 */
export const useChangePaymentsCategoryApiPaymentsChangeCategoryPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof changePaymentsCategoryApiPaymentsChangeCategoryPost>
    >,
    TError,
    { data: PaymentCategoryUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<
    ReturnType<typeof changePaymentsCategoryApiPaymentsChangeCategoryPost>
  >,
  TError,
  { data: PaymentCategoryUpdate },
  TContext
> => {
  const mutationOptions =
    getChangePaymentsCategoryApiPaymentsChangeCategoryPostMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
/**
 * –ú–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑–∞ —Å–ø–∏—Å–∫–æ–º ID
 * @summary Bulk Delete Payments
 */
export const bulkDeletePaymentsApiPaymentsBulkDeletePost = (
  paymentBulkDelete: MaybeRef<PaymentBulkDelete>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  paymentBulkDelete = unref(paymentBulkDelete);

  return axios.default.post(
    `/api/payments/bulk-delete`,
    paymentBulkDelete,
    options
  );
};

export const getBulkDeletePaymentsApiPaymentsBulkDeletePostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bulkDeletePaymentsApiPaymentsBulkDeletePost>>,
    TError,
    { data: PaymentBulkDelete },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bulkDeletePaymentsApiPaymentsBulkDeletePost>>,
  TError,
  { data: PaymentBulkDelete },
  TContext
> => {
  const mutationKey = ["bulkDeletePaymentsApiPaymentsBulkDeletePost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bulkDeletePaymentsApiPaymentsBulkDeletePost>>,
    { data: PaymentBulkDelete }
  > = (props) => {
    const { data } = props ?? {};

    return bulkDeletePaymentsApiPaymentsBulkDeletePost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BulkDeletePaymentsApiPaymentsBulkDeletePostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof bulkDeletePaymentsApiPaymentsBulkDeletePost>>
  >;
export type BulkDeletePaymentsApiPaymentsBulkDeletePostMutationBody =
  PaymentBulkDelete;
export type BulkDeletePaymentsApiPaymentsBulkDeletePostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Bulk Delete Payments
 */
export const useBulkDeletePaymentsApiPaymentsBulkDeletePost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bulkDeletePaymentsApiPaymentsBulkDeletePost>>,
    TError,
    { data: PaymentBulkDelete },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof bulkDeletePaymentsApiPaymentsBulkDeletePost>>,
  TError,
  { data: PaymentBulkDelete },
  TContext
> => {
  const mutationOptions =
    getBulkDeletePaymentsApiPaymentsBulkDeletePostMutationOptions(options);

  return useMutation(mutationOptions);
};
