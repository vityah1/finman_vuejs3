/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * FinMan API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  GroupCreate,
  GroupInvitationCreate,
  GroupInvitationResponse,
  GroupUpdate,
  GroupUserAdd,
  GroupUserResponse,
  GroupUserUpdate,
  HTTPValidationError,
} from ".././model";

/**
 * –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥—Ä—É–ø—ñ
 * @summary Update User Relation
 */
export const updateUserRelationApiGroupsGroupIdUsersUserIdPatch = (
  groupId: MaybeRef<number>,
  userId: MaybeRef<number>,
  groupUserUpdate: MaybeRef<GroupUserUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupId = unref(groupId);
  userId = unref(userId);
  groupUserUpdate = unref(groupUserUpdate);

  return axios.patch(
    `/api/groups/${groupId}/users/${userId}`,
    groupUserUpdate,
    options
  );
};

export const getUpdateUserRelationApiGroupsGroupIdUsersUserIdPatchMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof updateUserRelationApiGroupsGroupIdUsersUserIdPatch>
      >,
      TError,
      { groupId: number; userId: number; data: GroupUserUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof updateUserRelationApiGroupsGroupIdUsersUserIdPatch>
    >,
    TError,
    { groupId: number; userId: number; data: GroupUserUpdate },
    TContext
  > => {
    const mutationKey = ["updateUserRelationApiGroupsGroupIdUsersUserIdPatch"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof updateUserRelationApiGroupsGroupIdUsersUserIdPatch>
      >,
      { groupId: number; userId: number; data: GroupUserUpdate }
    > = (props) => {
      const { groupId, userId, data } = props ?? {};

      return updateUserRelationApiGroupsGroupIdUsersUserIdPatch(
        groupId,
        userId,
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateUserRelationApiGroupsGroupIdUsersUserIdPatchMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof updateUserRelationApiGroupsGroupIdUsersUserIdPatch>
    >
  >;
export type UpdateUserRelationApiGroupsGroupIdUsersUserIdPatchMutationBody =
  GroupUserUpdate;
export type UpdateUserRelationApiGroupsGroupIdUsersUserIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Update User Relation
 */
export const useUpdateUserRelationApiGroupsGroupIdUsersUserIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof updateUserRelationApiGroupsGroupIdUsersUserIdPatch>
    >,
    TError,
    { groupId: number; userId: number; data: GroupUserUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<
    ReturnType<typeof updateUserRelationApiGroupsGroupIdUsersUserIdPatch>
  >,
  TError,
  { groupId: number; userId: number; data: GroupUserUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateUserRelationApiGroupsGroupIdUsersUserIdPatchMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –≥—Ä—É–ø–∏
 * @summary Get Group Invitations
 */
export const getGroupInvitationsApiGroupsGroupIdInvitationsGet = (
  groupId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GroupInvitationResponse[]>> => {
  groupId = unref(groupId);

  return axios.get(`/api/groups/${groupId}/invitations`, options);
};

export const getGetGroupInvitationsApiGroupsGroupIdInvitationsGetQueryKey = (
  groupId: MaybeRef<number>
) => {
  return ["api", "groups", groupId, "invitations"] as const;
};

export const getGetGroupInvitationsApiGroupsGroupIdInvitationsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getGroupInvitationsApiGroupsGroupIdInvitationsGet>
    >,
    TError = AxiosError<HTTPValidationError>
  >(
    groupId: MaybeRef<number>,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<typeof getGroupInvitationsApiGroupsGroupIdInvitationsGet>
          >,
          TError,
          TData
        >
      >;
      axios?: AxiosRequestConfig;
    }
  ) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
      getGetGroupInvitationsApiGroupsGroupIdInvitationsGetQueryKey(groupId);

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getGroupInvitationsApiGroupsGroupIdInvitationsGet>
      >
    > = ({ signal }) =>
      getGroupInvitationsApiGroupsGroupIdInvitationsGet(groupId, {
        signal,
        ...axiosOptions,
      });

    return {
      queryKey,
      queryFn,
      enabled: computed(() => !!unref(groupId)),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getGroupInvitationsApiGroupsGroupIdInvitationsGet>
      >,
      TError,
      TData
    >;
  };

export type GetGroupInvitationsApiGroupsGroupIdInvitationsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getGroupInvitationsApiGroupsGroupIdInvitationsGet>
    >
  >;
export type GetGroupInvitationsApiGroupsGroupIdInvitationsGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Group Invitations
 */

export function useGetGroupInvitationsApiGroupsGroupIdInvitationsGet<
  TData = Awaited<
    ReturnType<typeof getGroupInvitationsApiGroupsGroupIdInvitationsGet>
  >,
  TError = AxiosError<HTTPValidationError>
>(
  groupId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getGroupInvitationsApiGroupsGroupIdInvitationsGet>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetGroupInvitationsApiGroupsGroupIdInvitationsGetQueryOptions(
      groupId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏
 * @summary Create Group Invitation
 */
export const createGroupInvitationApiGroupsGroupIdInvitationsPost = (
  groupId: MaybeRef<number>,
  groupInvitationCreate: MaybeRef<GroupInvitationCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupId = unref(groupId);
  groupInvitationCreate = unref(groupInvitationCreate);

  return axios.post(
    `/api/groups/${groupId}/invitations`,
    groupInvitationCreate,
    options
  );
};

export const getCreateGroupInvitationApiGroupsGroupIdInvitationsPostMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof createGroupInvitationApiGroupsGroupIdInvitationsPost>
      >,
      TError,
      { groupId: number; data: GroupInvitationCreate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof createGroupInvitationApiGroupsGroupIdInvitationsPost>
    >,
    TError,
    { groupId: number; data: GroupInvitationCreate },
    TContext
  > => {
    const mutationKey = [
      "createGroupInvitationApiGroupsGroupIdInvitationsPost",
    ];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof createGroupInvitationApiGroupsGroupIdInvitationsPost>
      >,
      { groupId: number; data: GroupInvitationCreate }
    > = (props) => {
      const { groupId, data } = props ?? {};

      return createGroupInvitationApiGroupsGroupIdInvitationsPost(
        groupId,
        data,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CreateGroupInvitationApiGroupsGroupIdInvitationsPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof createGroupInvitationApiGroupsGroupIdInvitationsPost>
    >
  >;
export type CreateGroupInvitationApiGroupsGroupIdInvitationsPostMutationBody =
  GroupInvitationCreate;
export type CreateGroupInvitationApiGroupsGroupIdInvitationsPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Create Group Invitation
 */
export const useCreateGroupInvitationApiGroupsGroupIdInvitationsPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof createGroupInvitationApiGroupsGroupIdInvitationsPost>
    >,
    TError,
    { groupId: number; data: GroupInvitationCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<
    ReturnType<typeof createGroupInvitationApiGroupsGroupIdInvitationsPost>
  >,
  TError,
  { groupId: number; data: GroupInvitationCreate },
  TContext
> => {
  const mutationOptions =
    getCreateGroupInvitationApiGroupsGroupIdInvitationsPostMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @summary Get Groups
 */
export const getGroupsApiGroupsGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/api/groups`, options);
};

export const getGetGroupsApiGroupsGetQueryKey = () => {
  return ["api", "groups"] as const;
};

export const getGetGroupsApiGroupsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsApiGroupsGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getGroupsApiGroupsGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetGroupsApiGroupsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsApiGroupsGet>>
  > = ({ signal }) => getGroupsApiGroupsGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsApiGroupsGet>>,
    TError,
    TData
  >;
};

export type GetGroupsApiGroupsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsApiGroupsGet>>
>;
export type GetGroupsApiGroupsGetQueryError = AxiosError<HTTPValidationError>;

/**
 * @summary Get Groups
 */

export function useGetGroupsApiGroupsGet<
  TData = Awaited<ReturnType<typeof getGroupsApiGroupsGet>>,
  TError = AxiosError<HTTPValidationError>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getGroupsApiGroupsGet>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGroupsApiGroupsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É–ø—É
 * @summary Create Group
 */
export const createGroupApiGroupsPost = (
  groupCreate: MaybeRef<GroupCreate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupCreate = unref(groupCreate);

  return axios.post(`/api/groups`, groupCreate, options);
};

export const getCreateGroupApiGroupsPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createGroupApiGroupsPost>>,
    TError,
    { data: GroupCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createGroupApiGroupsPost>>,
  TError,
  { data: GroupCreate },
  TContext
> => {
  const mutationKey = ["createGroupApiGroupsPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createGroupApiGroupsPost>>,
    { data: GroupCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createGroupApiGroupsPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateGroupApiGroupsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createGroupApiGroupsPost>>
>;
export type CreateGroupApiGroupsPostMutationBody = GroupCreate;
export type CreateGroupApiGroupsPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Create Group
 */
export const useCreateGroupApiGroupsPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createGroupApiGroupsPost>>,
    TError,
    { data: GroupCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof createGroupApiGroupsPost>>,
  TError,
  { data: GroupCreate },
  TContext
> => {
  const mutationOptions = getCreateGroupApiGroupsPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É
 * @summary Delete Group
 */
export const deleteGroupApiGroupsGroupIdDelete = (
  groupId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupId = unref(groupId);

  return axios.delete(`/api/groups/${groupId}`, options);
};

export const getDeleteGroupApiGroupsGroupIdDeleteMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupApiGroupsGroupIdDelete>>,
    TError,
    { groupId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroupApiGroupsGroupIdDelete>>,
  TError,
  { groupId: number },
  TContext
> => {
  const mutationKey = ["deleteGroupApiGroupsGroupIdDelete"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGroupApiGroupsGroupIdDelete>>,
    { groupId: number }
  > = (props) => {
    const { groupId } = props ?? {};

    return deleteGroupApiGroupsGroupIdDelete(groupId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupApiGroupsGroupIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGroupApiGroupsGroupIdDelete>>
>;

export type DeleteGroupApiGroupsGroupIdDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Delete Group
 */
export const useDeleteGroupApiGroupsGroupIdDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupApiGroupsGroupIdDelete>>,
    TError,
    { groupId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteGroupApiGroupsGroupIdDelete>>,
  TError,
  { groupId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteGroupApiGroupsGroupIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø—É
 * @summary Update Group
 */
export const updateGroupApiGroupsGroupIdPatch = (
  groupId: MaybeRef<number>,
  groupUpdate: MaybeRef<GroupUpdate>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupId = unref(groupId);
  groupUpdate = unref(groupUpdate);

  return axios.patch(`/api/groups/${groupId}`, groupUpdate, options);
};

export const getUpdateGroupApiGroupsGroupIdPatchMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateGroupApiGroupsGroupIdPatch>>,
    TError,
    { groupId: number; data: GroupUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateGroupApiGroupsGroupIdPatch>>,
  TError,
  { groupId: number; data: GroupUpdate },
  TContext
> => {
  const mutationKey = ["updateGroupApiGroupsGroupIdPatch"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateGroupApiGroupsGroupIdPatch>>,
    { groupId: number; data: GroupUpdate }
  > = (props) => {
    const { groupId, data } = props ?? {};

    return updateGroupApiGroupsGroupIdPatch(groupId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateGroupApiGroupsGroupIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGroupApiGroupsGroupIdPatch>>
>;
export type UpdateGroupApiGroupsGroupIdPatchMutationBody = GroupUpdate;
export type UpdateGroupApiGroupsGroupIdPatchMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Update Group
 */
export const useUpdateGroupApiGroupsGroupIdPatch = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateGroupApiGroupsGroupIdPatch>>,
    TError,
    { groupId: number; data: GroupUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateGroupApiGroupsGroupIdPatch>>,
  TError,
  { groupId: number; data: GroupUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateGroupApiGroupsGroupIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø—É
 * @summary Get Group
 */
export const getGroupApiGroupsGroupIdGet = (
  groupId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupId = unref(groupId);

  return axios.get(`/api/groups/${groupId}`, options);
};

export const getGetGroupApiGroupsGroupIdGetQueryKey = (
  groupId: MaybeRef<number>
) => {
  return ["api", "groups", groupId] as const;
};

export const getGetGroupApiGroupsGroupIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupApiGroupsGroupIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  groupId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupApiGroupsGroupIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetGroupApiGroupsGroupIdGetQueryKey(groupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupApiGroupsGroupIdGet>>
  > = ({ signal }) =>
    getGroupApiGroupsGroupIdGet(groupId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(groupId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupApiGroupsGroupIdGet>>,
    TError,
    TData
  >;
};

export type GetGroupApiGroupsGroupIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupApiGroupsGroupIdGet>>
>;
export type GetGroupApiGroupsGroupIdGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Group
 */

export function useGetGroupApiGroupsGroupIdGet<
  TData = Awaited<ReturnType<typeof getGroupApiGroupsGroupIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  groupId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupApiGroupsGroupIdGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGroupApiGroupsGroupIdGetQueryOptions(
    groupId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≥—Ä—É–ø–∏
 * @summary Leave Group
 */
export const leaveGroupApiGroupsGroupIdLeavePost = (
  groupId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupId = unref(groupId);

  return axios.post(`/api/groups/${groupId}/leave`, undefined, options);
};

export const getLeaveGroupApiGroupsGroupIdLeavePostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof leaveGroupApiGroupsGroupIdLeavePost>>,
    TError,
    { groupId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof leaveGroupApiGroupsGroupIdLeavePost>>,
  TError,
  { groupId: number },
  TContext
> => {
  const mutationKey = ["leaveGroupApiGroupsGroupIdLeavePost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof leaveGroupApiGroupsGroupIdLeavePost>>,
    { groupId: number }
  > = (props) => {
    const { groupId } = props ?? {};

    return leaveGroupApiGroupsGroupIdLeavePost(groupId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LeaveGroupApiGroupsGroupIdLeavePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof leaveGroupApiGroupsGroupIdLeavePost>>
>;

export type LeaveGroupApiGroupsGroupIdLeavePostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Leave Group
 */
export const useLeaveGroupApiGroupsGroupIdLeavePost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof leaveGroupApiGroupsGroupIdLeavePost>>,
    TError,
    { groupId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof leaveGroupApiGroupsGroupIdLeavePost>>,
  TError,
  { groupId: number },
  TContext
> => {
  const mutationOptions =
    getLeaveGroupApiGroupsGroupIdLeavePostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –≥—Ä—É–ø—ñ
 * @summary Get Group Users
 */
export const getGroupUsersApiGroupsGroupIdUsersGet = (
  groupId: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GroupUserResponse[]>> => {
  groupId = unref(groupId);

  return axios.get(`/api/groups/${groupId}/users`, options);
};

export const getGetGroupUsersApiGroupsGroupIdUsersGetQueryKey = (
  groupId: MaybeRef<number>
) => {
  return ["api", "groups", groupId, "users"] as const;
};

export const getGetGroupUsersApiGroupsGroupIdUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupUsersApiGroupsGroupIdUsersGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  groupId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupUsersApiGroupsGroupIdUsersGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetGroupUsersApiGroupsGroupIdUsersGetQueryKey(groupId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupUsersApiGroupsGroupIdUsersGet>>
  > = ({ signal }) =>
    getGroupUsersApiGroupsGroupIdUsersGet(groupId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(groupId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupUsersApiGroupsGroupIdUsersGet>>,
    TError,
    TData
  >;
};

export type GetGroupUsersApiGroupsGroupIdUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupUsersApiGroupsGroupIdUsersGet>>
>;
export type GetGroupUsersApiGroupsGroupIdUsersGetQueryError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Get Group Users
 */

export function useGetGroupUsersApiGroupsGroupIdUsersGet<
  TData = Awaited<ReturnType<typeof getGroupUsersApiGroupsGroupIdUsersGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  groupId: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupUsersApiGroupsGroupIdUsersGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGroupUsersApiGroupsGroupIdUsersGetQueryOptions(
    groupId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥—Ä—É–ø–∏
 * @summary Add User To Group
 */
export const addUserToGroupApiGroupsGroupIdUsersPost = (
  groupId: MaybeRef<number>,
  groupUserAdd: MaybeRef<GroupUserAdd>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupId = unref(groupId);
  groupUserAdd = unref(groupUserAdd);

  return axios.post(`/api/groups/${groupId}/users`, groupUserAdd, options);
};

export const getAddUserToGroupApiGroupsGroupIdUsersPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserToGroupApiGroupsGroupIdUsersPost>>,
    TError,
    { groupId: number; data: GroupUserAdd },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addUserToGroupApiGroupsGroupIdUsersPost>>,
  TError,
  { groupId: number; data: GroupUserAdd },
  TContext
> => {
  const mutationKey = ["addUserToGroupApiGroupsGroupIdUsersPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addUserToGroupApiGroupsGroupIdUsersPost>>,
    { groupId: number; data: GroupUserAdd }
  > = (props) => {
    const { groupId, data } = props ?? {};

    return addUserToGroupApiGroupsGroupIdUsersPost(groupId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddUserToGroupApiGroupsGroupIdUsersPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addUserToGroupApiGroupsGroupIdUsersPost>>
>;
export type AddUserToGroupApiGroupsGroupIdUsersPostMutationBody = GroupUserAdd;
export type AddUserToGroupApiGroupsGroupIdUsersPostMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Add User To Group
 */
export const useAddUserToGroupApiGroupsGroupIdUsersPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserToGroupApiGroupsGroupIdUsersPost>>,
    TError,
    { groupId: number; data: GroupUserAdd },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof addUserToGroupApiGroupsGroupIdUsersPost>>,
  TError,
  { groupId: number; data: GroupUserAdd },
  TContext
> => {
  const mutationOptions =
    getAddUserToGroupApiGroupsGroupIdUsersPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≥—Ä—É–ø–∏
 * @summary Remove User From Group
 */
export const removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete = (
  groupId: MaybeRef<number>,
  userIdToRemove: MaybeRef<number>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  groupId = unref(groupId);
  userIdToRemove = unref(userIdToRemove);

  return axios.delete(
    `/api/groups/${groupId}/users/${userIdToRemove}`,
    options
  );
};

export const getRemoveUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDeleteMutationOptions =
  <TError = AxiosError<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete
        >
      >,
      TError,
      { groupId: number; userIdToRemove: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete
      >
    >,
    TError,
    { groupId: number; userIdToRemove: number },
    TContext
  > => {
    const mutationKey = [
      "removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete",
    ];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete
        >
      >,
      { groupId: number; userIdToRemove: number }
    > = (props) => {
      const { groupId, userIdToRemove } = props ?? {};

      return removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete(
        groupId,
        userIdToRemove,
        axiosOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type RemoveUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete
      >
    >
  >;

export type RemoveUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDeleteMutationError =
  AxiosError<HTTPValidationError>;

/**
 * @summary Remove User From Group
 */
export const useRemoveUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<
        typeof removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete
      >
    >,
    TError,
    { groupId: number; userIdToRemove: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<
    ReturnType<
      typeof removeUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDelete
    >
  >,
  TError,
  { groupId: number; userIdToRemove: number },
  TContext
> => {
  const mutationOptions =
    getRemoveUserFromGroupApiGroupsGroupIdUsersUserIdToRemoveDeleteMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
